{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Noah\\\\Desktop\\\\Project\\\\Noahworld\\\\client\\\\pages\\\\[category]\\\\post\\\\[id].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n/* eslint-disable react-hooks/exhaustive-deps */\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { memo, useCallback, useEffect, useState } from \"react\";\nimport parse from \"html-react-parser\";\nimport { Divider, message } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LIKE_POST_REQUEST, LOAD_POST_REQUEST, UNLIKE_POST_REQUEST } from \"../../../@reducers/post\";\nimport { HeartFilled, HeartOutlined } from \"@ant-design/icons\";\nimport dayjs from \"dayjs\";\nimport Head from \"next/head\";\nimport { RED_COLOR } from \"../../../config\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { css } from \"@emotion/react\";\nimport dynamic from \"next/dynamic\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\ndayjs.locale(\"kor\");\nvar CommentForm = dynamic(_c = function _c() {\n  return import(\"../../../components/Blog/Comments/CommentForm\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../../../components/Blog/Comments/CommentForm\")];\n    },\n    modules: [\"[category]\\\\post\\\\[id].tsx -> \" + \"../../../components/Blog/Comments/CommentForm\"]\n  }\n});\n_c2 = CommentForm;\nvar ArticlePost = dynamic(_c3 = function _c3() {\n  return import(\"../../../components/Blog/Articles/ArticlePost\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../../../components/Blog/Articles/ArticlePost\")];\n    },\n    modules: [\"[category]\\\\post\\\\[id].tsx -> \" + \"../../../components/Blog/Articles/ArticlePost\"]\n  }\n});\n_c4 = ArticlePost;\nvar RemoteControl = dynamic(_c5 = function _c5() {\n  return import(\"../../../components/Blog/Comments/RemoteControl\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../../../components/Blog/Comments/RemoteControl\")];\n    },\n    modules: [\"[category]\\\\post\\\\[id].tsx -> \" + \"../../../components/Blog/Comments/RemoteControl\"]\n  }\n});\n_c6 = RemoteControl;\n\nvar Heart = _styled(\"a\", false ? {\n  target: \"e16yzffh1\"\n} : {\n  target: \"e16yzffh1\",\n  label: \"Heart\"\n})(\"display:inline-block;margin:0 0.5rem 0 1rem;font-size:1.5rem;&:hover{color:\", RED_COLOR, \";-webkit-animation:heartBeat 1s;animation:heartBeat 1s;}\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nvar HeartLiked = _styled(\"a\", false ? {\n  target: \"e16yzffh0\"\n} : {\n  target: \"e16yzffh0\",\n  label: \"HeartLiked\"\n})(\"display:inline-block;margin:0 0.5rem 0 1rem;font-size:1.5rem;color:\", RED_COLOR, \";&:hover{color:\", RED_COLOR, \";span{color:\", RED_COLOR, \";}}\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nvar PostDesc = false ? {\n  name: \"10dg97j\",\n  styles: \"display:flex;justify-content:flex-start;font-size:1.1rem;margin-bottom:5rem;color:rgba(0, 0, 0, 0.2)\"\n} : {\n  name: \"1y4tyzg-PostDesc\",\n  styles: \"display:flex;justify-content:flex-start;font-size:1.1rem;margin-bottom:5rem;color:rgba(0, 0, 0, 0.2);label:PostDesc;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar PostSubTitle = false ? {\n  name: \"kw5a02\",\n  styles: \"margin:5rem 0 1rem 0;font-size:1.5rem;font-weight:bold\"\n} : {\n  name: \"1r150g0-PostSubTitle\",\n  styles: \"margin:5rem 0 1rem 0;font-size:1.5rem;font-weight:bold;label:PostSubTitle;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar MorePostWrapper = false ? {\n  name: \"1he701t\",\n  styles: \"overflow:auto;height:280px;margin-top:1rem;border-top:1px solid rgba(0, 0, 0, 0.1);div:first-of-type{padding:1rem 0.5rem;display:flex;justify-content:space-between;border-bottom:1px solid rgba(0, 0, 0, 0.1);}\"\n} : {\n  name: \"1o09cgs-MorePostWrapper\",\n  styles: \"overflow:auto;height:280px;margin-top:1rem;border-top:1px solid rgba(0, 0, 0, 0.1);div:first-of-type{padding:1rem 0.5rem;display:flex;justify-content:space-between;border-bottom:1px solid rgba(0, 0, 0, 0.1);};label:MorePostWrapper;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar PostWrapper = false ? {\n  name: \"11z473d\",\n  styles: \"position:relative;display:flex;justify-content:space-between\"\n} : {\n  name: \"14a0h1n-PostWrapper\",\n  styles: \"position:relative;display:flex;justify-content:space-between;label:PostWrapper;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar BlogPostPage = /*#__PURE__*/memo(_c7 = _s(function () {\n  var _post$PostLikers2, _post$PostLikers3;\n\n  _s();\n\n  var router = useRouter();\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      liked = _useState[0],\n      setLiked = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      post = _useSelector.post,\n      unlikePostDone = _useSelector.unlikePostDone,\n      likePostDone = _useSelector.likePostDone,\n      addCommentDone = _useSelector.addCommentDone,\n      removeCommentDone = _useSelector.removeCommentDone,\n      removeSubCommentDone = _useSelector.removeSubCommentDone,\n      prevPost = _useSelector.prevPost,\n      nextPost = _useSelector.nextPost;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      user = _useSelector2.user;\n\n  var _useState2 = useState(\"\"),\n      Fullcontent = _useState2[0],\n      setFullcontent = _useState2[1];\n\n  useEffect(function () {\n    var _post$PostLikers;\n\n    if (user && post !== null && post !== void 0 && (_post$PostLikers = post.PostLikers) !== null && _post$PostLikers !== void 0 && _post$PostLikers.find(function (v) {\n      return v.id === user.id;\n    })) {\n      setLiked(true);\n    } else {\n      setLiked(false);\n    }\n  }, [router.pathname, post === null || post === void 0 ? void 0 : post.PostLikers]);\n  var onClickUnlike = useCallback(function () {\n    dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: {\n        PostId: post === null || post === void 0 ? void 0 : post.id,\n        UserId: user === null || user === void 0 ? void 0 : user.id\n      }\n    });\n  }, [post === null || post === void 0 ? void 0 : post.id, user === null || user === void 0 ? void 0 : user.id]);\n  useEffect(function () {\n    var _post$content;\n\n    var tagContent = post === null || post === void 0 ? void 0 : (_post$content = post.content) === null || _post$content === void 0 ? void 0 : _post$content.split(/(#[^\\s#+^<]+)/g).map(function (v) {\n      if (v.match(/(#.*\")/g)) {\n        return v;\n      }\n\n      if (v.match(/(#youtube:)/g)) {\n        return \"<iframe class=\\\"youtube\\\" title=\\\"YouTube video player\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen src=\\\"https://www.youtube.com/embed/\".concat(v.slice(9), \"\\\"></iframe>\");\n      }\n\n      if (v.match(/(#[^\\s#+^<]+)/g)) {\n        return \"<a class=\\\"hashtag\\\">\".concat(v, \"</a>\");\n      }\n\n      return v;\n    });\n    var fullContentRemoveComma = post && (tagContent === null || tagContent === void 0 ? void 0 : tagContent.join(\"\"));\n    fullContentRemoveComma && setFullcontent(fullContentRemoveComma);\n  }, [post]);\n  useEffect(function () {\n    var postId = router.pathname;\n\n    if (!postId) {\n      router.push(\"/\");\n    }\n  }, [router.pathname]);\n  useEffect(function () {\n    dispatch({\n      type: LOAD_POST_REQUEST,\n      data: {\n        postId: router.query.id,\n        UserId: user === null || user === void 0 ? void 0 : user.id,\n        category: router.query.category\n      }\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addCommentDone, unlikePostDone, likePostDone, removeCommentDone, removeSubCommentDone]);\n  useEffect(function () {\n    if (addCommentDone) {\n      message.success(\"Added comment 🥰\");\n    }\n  }, [addCommentDone]);\n  var onClickLike = useCallback(function () {\n    if (!user) {\n      message.error(\"You can thumbs up when you are logged in 😿\");\n      return;\n    }\n\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: {\n        PostId: post === null || post === void 0 ? void 0 : post.id,\n        UserId: user.id\n      }\n    });\n  }, [post === null || post === void 0 ? void 0 : post.id, user === null || user === void 0 ? void 0 : user.id]);\n  var handleImgError = useCallback(function (e) {\n    e.target.src = \"/images/blog/noImage.gif\";\n  }, []);\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, \"Noah world | \", post === null || post === void 0 ? void 0 : post.title.slice(0, 10), \"...\")), ___EmotionJSX(\"h1\", {\n    style: {\n      lineHeight: \"1.5\"\n    },\n    className: \"post_main_title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, post === null || post === void 0 ? void 0 : post.title), ___EmotionJSX(Divider, {\n    className: \"blog_post_divier\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }), ___EmotionJSX(\"ul\", {\n    css: PostDesc,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, dayjs(post === null || post === void 0 ? void 0 : post.createdAt).format(\"YYYY.MM.DD\")), ___EmotionJSX(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, \"\\xB7\\xA0\", post === null || post === void 0 ? void 0 : post.hit, \" views\"), ___EmotionJSX(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, \"\\xB7\\xA0\", post === null || post === void 0 ? void 0 : (_post$PostLikers2 = post.PostLikers) === null || _post$PostLikers2 === void 0 ? void 0 : _post$PostLikers2.length, \" likes\")), ___EmotionJSX(\"div\", {\n    css: PostWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"blog_post_article\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"tui-editor-contents\",\n    style: {\n      marginBottom: \"3rem\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"img\", {\n    alt: post === null || post === void 0 ? void 0 : post.title,\n    style: {\n      width: \"100%\",\n      marginBottom: \"6rem\"\n    },\n    src: post !== null && post !== void 0 && post.thumbnail ? post === null || post === void 0 ? void 0 : post.thumbnail : post !== null && post !== void 0 && post.imagePath ? post === null || post === void 0 ? void 0 : post.imagePath.replace(/\\/thumb\\//, \"/original/\") : \"/images/blog/noImage.gif\",\n    onError: handleImgError,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }), Fullcontent && parse(Fullcontent)), ___EmotionJSX(\"h4\", {\n    css: PostSubTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }, \"Do you like this Post?\", \" \", liked ? ___EmotionJSX(HeartLiked, {\n    onClick: onClickUnlike,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(HeartFilled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  })) : ___EmotionJSX(Heart, {\n    onClick: onClickLike,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(HeartOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  })), ___EmotionJSX(\"span\", {\n    style: {\n      fontSize: \"1rem\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }, post === null || post === void 0 ? void 0 : (_post$PostLikers3 = post.PostLikers) === null || _post$PostLikers3 === void 0 ? void 0 : _post$PostLikers3.length)), ___EmotionJSX(CommentForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }), ___EmotionJSX(\"h4\", {\n    css: PostSubTitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 11\n    }\n  }, \"More posts\"), ___EmotionJSX(\"div\", {\n    css: MorePostWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }, \"Title\"), ___EmotionJSX(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 15\n    }\n  }, \"Date\")), prevPost === null || prevPost === void 0 ? void 0 : prevPost.map(function (article, i) {\n    return ___EmotionJSX(ArticlePost, {\n      key: i,\n      article: article,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 15\n      }\n    });\n  }), nextPost === null || nextPost === void 0 ? void 0 : nextPost.map(function (article, i) {\n    return ___EmotionJSX(ArticlePost, {\n      key: i,\n      article: article,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 15\n      }\n    });\n  }))), ___EmotionJSX(RemoteControl, {\n    Fullcontent: Fullcontent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  })));\n}, \"E0j76wvJUhTT2Fkib4JnPKmX2qk=\", false, function () {\n  return [useRouter, useDispatch, useSelector, useSelector];\n}));\n_c8 = BlogPostPage;\nexport var __N_SSP = true;\nexport default _c9 = /*#__PURE__*/memo(BlogPostPage);\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"CommentForm$dynamic\");\n$RefreshReg$(_c2, \"CommentForm\");\n$RefreshReg$(_c3, \"ArticlePost$dynamic\");\n$RefreshReg$(_c4, \"ArticlePost\");\n$RefreshReg$(_c5, \"RemoteControl$dynamic\");\n$RefreshReg$(_c6, \"RemoteControl\");\n$RefreshReg$(_c7, \"BlogPostPage$memo\");\n$RefreshReg$(_c8, \"BlogPostPage\");\n$RefreshReg$(_c9, \"%default%\");","map":{"version":3,"sources":["C:/Users/Noah/Desktop/Project/Noahworld/client/pages/[category]/post/[id].tsx"],"names":["React","memo","useCallback","useEffect","useState","parse","Divider","message","useDispatch","useSelector","LIKE_POST_REQUEST","LOAD_POST_REQUEST","UNLIKE_POST_REQUEST","HeartFilled","HeartOutlined","dayjs","Head","RED_COLOR","useRouter","css","dynamic","locale","CommentForm","ArticlePost","RemoteControl","Heart","HeartLiked","PostDesc","PostSubTitle","MorePostWrapper","PostWrapper","BlogPostPage","router","dispatch","liked","setLiked","state","post","unlikePostDone","likePostDone","addCommentDone","removeCommentDone","removeSubCommentDone","prevPost","nextPost","user","Fullcontent","setFullcontent","PostLikers","find","v","id","pathname","onClickUnlike","type","data","PostId","UserId","tagContent","content","split","map","match","slice","fullContentRemoveComma","join","postId","push","query","category","success","onClickLike","error","handleImgError","e","target","src","title","lineHeight","createdAt","format","hit","length","marginBottom","width","thumbnail","imagePath","replace","fontSize","article","i"],"mappings":";;;;;;;;AAAA;;AACA;AAEA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,MAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,mBAA/C,QAA0E,yBAA1E;AAEA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,mBAA3C;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAKA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,OAAOC,OAAP,MAAoB,cAApB;;AACAL,KAAK,CAACM,MAAN,CAAa,KAAb;AAEA,IAAMC,WAAW,GAAGF,OAAO,MAAC;AAAA,SAAM,OAAO,+CAAP,CAAN;AAAA,CAAD;AAAA;AAAA;AAAA,kCAAc,+CAAd;AAAA;AAAA,iDAAc,+CAAd;AAAA;AAAA,EAA3B;MAAME,W;AACN,IAAMC,WAAW,GAAGH,OAAO,OAAC;AAAA,SAAM,OAAO,+CAAP,CAAN;AAAA,CAAD;AAAA;AAAA;AAAA,kCAAc,+CAAd;AAAA;AAAA,iDAAc,+CAAd;AAAA;AAAA,EAA3B;MAAMG,W;AACN,IAAMC,aAAa,GAAGJ,OAAO,OAAC;AAAA,SAAM,OAAO,iDAAP,CAAN;AAAA,CAAD;AAAA;AAAA;AAAA,kCAAc,iDAAd;AAAA;AAAA,iDAAc,iDAAd;AAAA;AAAA,EAA7B;MAAMI,a;;AAEN,IAAMC,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,kFAKER,SALF,gmXAAX;;AAWA,IAAMS,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,0EAILT,SAJK,qBAMHA,SANG,kBAQDA,SARC,2iXAAhB;;AAYA,IAAMU,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;AAQA,IAAMC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;AAMA,IAAMC,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAaA,IAAMC,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;AAMA,IAAMC,YAAY,gBAAG9B,IAAI,UAAC,YAAM;AAAA;;AAAA;;AAC9B,MAAM+B,MAAM,GAAGd,SAAS,EAAxB;AACA,MAAMe,QAAQ,GAAGzB,WAAW,EAA5B;;AAF8B,kBAGJJ,QAAQ,CAAC,KAAD,CAHJ;AAAA,MAGvB8B,KAHuB;AAAA,MAGhBC,QAHgB;;AAAA,qBAa1B1B,WAAW,CAAC,UAAC2B,KAAD;AAAA,WAAsBA,KAAK,CAACC,IAA5B;AAAA,GAAD,CAbe;AAAA,MAK5BA,IAL4B,gBAK5BA,IAL4B;AAAA,MAM5BC,cAN4B,gBAM5BA,cAN4B;AAAA,MAO5BC,YAP4B,gBAO5BA,YAP4B;AAAA,MAQ5BC,cAR4B,gBAQ5BA,cAR4B;AAAA,MAS5BC,iBAT4B,gBAS5BA,iBAT4B;AAAA,MAU5BC,oBAV4B,gBAU5BA,oBAV4B;AAAA,MAW5BC,QAX4B,gBAW5BA,QAX4B;AAAA,MAY5BC,QAZ4B,gBAY5BA,QAZ4B;;AAAA,sBAcbnC,WAAW,CAAC,UAAC2B,KAAD;AAAA,WAAsBA,KAAK,CAACS,IAA5B;AAAA,GAAD,CAdE;AAAA,MActBA,IAdsB,iBActBA,IAdsB;;AAAA,mBAeQzC,QAAQ,CAAC,EAAD,CAfhB;AAAA,MAevB0C,WAfuB;AAAA,MAeVC,cAfU;;AAiB9B5C,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACd,QAAI0C,IAAI,IAAIR,IAAJ,aAAIA,IAAJ,mCAAIA,IAAI,CAAEW,UAAV,6CAAI,iBAAkBC,IAAlB,CAAuB,UAACC,CAAD;AAAA,aAAOA,CAAC,CAACC,EAAF,KAASN,IAAI,CAACM,EAArB;AAAA,KAAvB,CAAZ,EAA6D;AAC3DhB,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAFD,MAEO;AACLA,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD;AACF,GANQ,EAMN,CAACH,MAAM,CAACoB,QAAR,EAAkBf,IAAlB,aAAkBA,IAAlB,uBAAkBA,IAAI,CAAEW,UAAxB,CANM,CAAT;AAQA,MAAMK,aAAa,GAAGnD,WAAW,CAAC,YAAM;AACtC+B,IAAAA,QAAQ,CAAC;AACPqB,MAAAA,IAAI,EAAE1C,mBADC;AAEP2C,MAAAA,IAAI,EAAE;AAAEC,QAAAA,MAAM,EAAEnB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEc,EAAhB;AAAoBM,QAAAA,MAAM,EAAEZ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEM;AAAlC;AAFC,KAAD,CAAR;AAID,GALgC,EAK9B,CAACd,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEc,EAAP,EAAWN,IAAX,aAAWA,IAAX,uBAAWA,IAAI,CAAEM,EAAjB,CAL8B,CAAjC;AAOAhD,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACd,QAAMuD,UAAU,GAAGrB,IAAH,aAAGA,IAAH,wCAAGA,IAAI,CAAEsB,OAAT,kDAAG,cAAeC,KAAf,CAAqB,gBAArB,EAAuCC,GAAvC,CAA2C,UAACX,CAAD,EAAO;AACnE,UAAIA,CAAC,CAACY,KAAF,CAAQ,SAAR,CAAJ,EAAwB;AACtB,eAAOZ,CAAP;AACD;;AACD,UAAIA,CAAC,CAACY,KAAF,CAAQ,cAAR,CAAJ,EAA6B;AAC3B,2PAAmOZ,CAAC,CAACa,KAAF,CACjO,CADiO,CAAnO;AAGD;;AACD,UAAIb,CAAC,CAACY,KAAF,CAAQ,gBAAR,CAAJ,EAA+B;AAC7B,8CAA6BZ,CAA7B;AACD;;AACD,aAAOA,CAAP;AACD,KAbkB,CAAnB;AAcA,QAAMc,sBAAsB,GAAG3B,IAAI,KAAIqB,UAAJ,aAAIA,UAAJ,uBAAIA,UAAU,CAAEO,IAAZ,CAAiB,EAAjB,CAAJ,CAAnC;AACAD,IAAAA,sBAAsB,IAAIjB,cAAc,CAACiB,sBAAD,CAAxC;AACD,GAjBQ,EAiBN,CAAC3B,IAAD,CAjBM,CAAT;AAmBAlC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAM+D,MAAM,GAAGlC,MAAM,CAACoB,QAAtB;;AACA,QAAI,CAACc,MAAL,EAAa;AACXlC,MAAAA,MAAM,CAACmC,IAAP,CAAY,GAAZ;AACD;AACF,GALQ,EAKN,CAACnC,MAAM,CAACoB,QAAR,CALM,CAAT;AAOAjD,EAAAA,SAAS,CAAC,YAAM;AACd8B,IAAAA,QAAQ,CAAC;AACPqB,MAAAA,IAAI,EAAE3C,iBADC;AAEP4C,MAAAA,IAAI,EAAE;AAAEW,QAAAA,MAAM,EAAElC,MAAM,CAACoC,KAAP,CAAajB,EAAvB;AAA2BM,QAAAA,MAAM,EAAEZ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEM,EAAzC;AAA6CkB,QAAAA,QAAQ,EAAErC,MAAM,CAACoC,KAAP,CAAaC;AAApE;AAFC,KAAD,CAAR,CADc,CAKd;AACD,GANQ,EAMN,CAAC7B,cAAD,EAAiBF,cAAjB,EAAiCC,YAAjC,EAA+CE,iBAA/C,EAAkEC,oBAAlE,CANM,CAAT;AAQAvC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIqC,cAAJ,EAAoB;AAClBjC,MAAAA,OAAO,CAAC+D,OAAR,CAAgB,kBAAhB;AACD;AACF,GAJQ,EAIN,CAAC9B,cAAD,CAJM,CAAT;AAMA,MAAM+B,WAAW,GAAGrE,WAAW,CAAC,YAAM;AACpC,QAAI,CAAC2C,IAAL,EAAW;AACTtC,MAAAA,OAAO,CAACiE,KAAR,CAAc,6CAAd;AACA;AACD;;AACDvC,IAAAA,QAAQ,CAAC;AACPqB,MAAAA,IAAI,EAAE5C,iBADC;AAEP6C,MAAAA,IAAI,EAAE;AAAEC,QAAAA,MAAM,EAAEnB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEc,EAAhB;AAAoBM,QAAAA,MAAM,EAAEZ,IAAI,CAACM;AAAjC;AAFC,KAAD,CAAR;AAID,GAT8B,EAS5B,CAACd,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEc,EAAP,EAAWN,IAAX,aAAWA,IAAX,uBAAWA,IAAI,CAAEM,EAAjB,CAT4B,CAA/B;AAWA,MAAMsB,cAAc,GAAGvE,WAAW,CAAC,UAACwE,CAAD,EAA6B;AAC7DA,IAAAA,CAAC,CAACC,MAAH,CAA+BC,GAA/B,GAAqC,0BAArC;AACD,GAFiC,EAE/B,EAF+B,CAAlC;AAIA,SACE,oCACE,cAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAqBvC,IAArB,aAAqBA,IAArB,uBAAqBA,IAAI,CAAEwC,KAAN,CAAYd,KAAZ,CAAkB,CAAlB,EAAqB,EAArB,CAArB,QADF,CADF,EAIE;AAAI,IAAA,KAAK,EAAE;AAAEe,MAAAA,UAAU,EAAE;AAAd,KAAX;AAAkC,IAAA,SAAS,EAAC,iBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGzC,IADH,aACGA,IADH,uBACGA,IAAI,CAAEwC,KADT,CAJF,EAOE,cAAC,OAAD;AAAS,IAAA,SAAS,EAAC,kBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAQE;AAAI,IAAA,GAAG,EAAElD,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKZ,KAAK,CAACsB,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAE0C,SAAP,CAAL,CAAuBC,MAAvB,CAA8B,YAA9B,CAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAY3C,IAAZ,aAAYA,IAAZ,uBAAYA,IAAI,CAAE4C,GAAlB,WAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAY5C,IAAZ,aAAYA,IAAZ,4CAAYA,IAAI,CAAEW,UAAlB,sDAAY,kBAAkBkC,MAA9B,WAHF,CARF,EAaE;AAAK,IAAA,GAAG,EAAEpD,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAqC,IAAA,KAAK,EAAE;AAAEqD,MAAAA,YAAY,EAAE;AAAhB,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAE9C,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEwC,KADb;AAEE,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAE,MAAT;AAAiBD,MAAAA,YAAY,EAAE;AAA/B,KAFT;AAGE,IAAA,GAAG,EACD9C,IAAI,SAAJ,IAAAA,IAAI,WAAJ,IAAAA,IAAI,CAAEgD,SAAN,GACIhD,IADJ,aACIA,IADJ,uBACIA,IAAI,CAAEgD,SADV,GAEIhD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,IAAAA,IAAI,CAAEiD,SAAN,GACAjD,IADA,aACAA,IADA,uBACAA,IAAI,CAAEiD,SAAN,CAAgBC,OAAhB,CAAwB,WAAxB,EAAqC,YAArC,CADA,GAEA,0BARR;AAUE,IAAA,OAAO,EAAEd,cAVX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAaG3B,WAAW,IAAIzC,KAAK,CAACyC,WAAD,CAbvB,CADF,EAgBE;AAAI,IAAA,GAAG,EAAElB,YAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACyB,GADzB,EAEGM,KAAK,GACJ,cAAC,UAAD;AAAY,IAAA,OAAO,EAAEmB,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADI,GAKJ,cAAC,KAAD;AAAO,IAAA,OAAO,EAAEkB,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPJ,EAWE;AAAM,IAAA,KAAK,EAAE;AAAEiB,MAAAA,QAAQ,EAAE;AAAZ,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCnD,IAApC,aAAoCA,IAApC,4CAAoCA,IAAI,CAAEW,UAA1C,sDAAoC,kBAAkBkC,MAAtD,CAXF,CAhBF,EA6BE,cAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7BF,EA8BE;AAAI,IAAA,GAAG,EAAEtD,YAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA9BF,EA+BE;AAAK,IAAA,GAAG,EAAEC,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CADF,EAKGc,QALH,aAKGA,QALH,uBAKGA,QAAQ,CAAEkB,GAAV,CAAc,UAAC4B,OAAD,EAAUC,CAAV;AAAA,WACb,cAAC,WAAD;AAAa,MAAA,GAAG,EAAEA,CAAlB;AAAqB,MAAA,OAAO,EAAED,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa;AAAA,GAAd,CALH,EAQG7C,QARH,aAQGA,QARH,uBAQGA,QAAQ,CAAEiB,GAAV,CAAc,UAAC4B,OAAD,EAAUC,CAAV;AAAA,WACb,cAAC,WAAD;AAAa,MAAA,GAAG,EAAEA,CAAlB;AAAqB,MAAA,OAAO,EAAED,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa;AAAA,GAAd,CARH,CA/BF,CADF,EA6CE,cAAC,aAAD;AAAe,IAAA,WAAW,EAAE3C,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CF,CAbF,CADF;AA+DD,CAtJwB;AAAA,UACR5B,SADQ,EAENV,WAFM,EAanBC,WAbmB,EAcNA,WAdM;AAAA,GAAzB;MAAMsB,Y;;AAyKN,kCAAe9B,IAAI,CAAC8B,YAAD,CAAnB","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n\r\nimport React, { memo, useCallback, useEffect, useState } from \"react\";\r\nimport parse from \"html-react-parser\";\r\nimport { Divider, message } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LIKE_POST_REQUEST, LOAD_POST_REQUEST, UNLIKE_POST_REQUEST } from \"../../../@reducers/post\";\r\nimport styled from \"@emotion/styled\";\r\nimport { HeartFilled, HeartOutlined } from \"@ant-design/icons\";\r\nimport { LOAD_INFO_REQUEST } from \"../../../@reducers/user\";\r\nimport dayjs from \"dayjs\";\r\nimport { RootState } from \"../../../@reducers\";\r\nimport Head from \"next/head\";\r\nimport { RED_COLOR } from \"../../../config\";\r\nimport wrapper from \"../../../@store/configureStore\";\r\nimport axios from \"axios\";\r\nimport { IStore } from \"../../../types\";\r\nimport { END } from \"@redux-saga/core\";\r\nimport { useRouter } from \"next/dist/client/router\";\r\nimport { css } from \"@emotion/react\";\r\nimport dynamic from \"next/dynamic\";\r\ndayjs.locale(\"kor\");\r\n\r\nconst CommentForm = dynamic(() => import(\"../../../components/Blog/Comments/CommentForm\"));\r\nconst ArticlePost = dynamic(() => import(\"../../../components/Blog/Articles/ArticlePost\"));\r\nconst RemoteControl = dynamic(() => import(\"../../../components/Blog/Comments/RemoteControl\"));\r\n\r\nconst Heart = styled.a`\r\n  display: inline-block;\r\n  margin: 0 0.5rem 0 1rem;\r\n  font-size: 1.5rem;\r\n  &:hover {\r\n    color: ${RED_COLOR};\r\n    -webkit-animation: heartBeat 1s;\r\n    animation: heartBeat 1s;\r\n  }\r\n`;\r\n\r\nconst HeartLiked = styled.a`\r\n  display: inline-block;\r\n  margin: 0 0.5rem 0 1rem;\r\n  font-size: 1.5rem;\r\n  color: ${RED_COLOR};\r\n  &:hover {\r\n    color: ${RED_COLOR};\r\n    span {\r\n      color: ${RED_COLOR};\r\n    }\r\n  }\r\n`;\r\nconst PostDesc = css`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  font-size: 1.1rem;\r\n  margin-bottom: 5rem;\r\n  color: rgba(0, 0, 0, 0.2);\r\n`;\r\n\r\nconst PostSubTitle = css`\r\n  margin: 5rem 0 1rem 0;\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MorePostWrapper = css`\r\n  overflow: auto;\r\n  height: 280px;\r\n  margin-top: 1rem;\r\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\r\n  div:first-of-type {\r\n    padding: 1rem 0.5rem;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  }\r\n`;\r\n\r\nconst PostWrapper = css`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst BlogPostPage = memo(() => {\r\n  const router = useRouter();\r\n  const dispatch = useDispatch();\r\n  const [liked, setLiked] = useState(false);\r\n  const {\r\n    post,\r\n    unlikePostDone,\r\n    likePostDone,\r\n    addCommentDone,\r\n    removeCommentDone,\r\n    removeSubCommentDone,\r\n    prevPost,\r\n    nextPost,\r\n  } = useSelector((state: RootState) => state.post);\r\n  const { user } = useSelector((state: RootState) => state.user);\r\n  const [Fullcontent, setFullcontent] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (user && post?.PostLikers?.find((v) => v.id === user.id)) {\r\n      setLiked(true);\r\n    } else {\r\n      setLiked(false);\r\n    }\r\n  }, [router.pathname, post?.PostLikers]);\r\n\r\n  const onClickUnlike = useCallback(() => {\r\n    dispatch({\r\n      type: UNLIKE_POST_REQUEST,\r\n      data: { PostId: post?.id, UserId: user?.id },\r\n    });\r\n  }, [post?.id, user?.id]);\r\n\r\n  useEffect(() => {\r\n    const tagContent = post?.content?.split(/(#[^\\s#+^<]+)/g).map((v) => {\r\n      if (v.match(/(#.*\")/g)) {\r\n        return v;\r\n      }\r\n      if (v.match(/(#youtube:)/g)) {\r\n        return `<iframe class=\"youtube\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen src=\"https://www.youtube.com/embed/${v.slice(\r\n          9\r\n        )}\"></iframe>`;\r\n      }\r\n      if (v.match(/(#[^\\s#+^<]+)/g)) {\r\n        return `<a class=\"hashtag\">${v}</a>`;\r\n      }\r\n      return v;\r\n    });\r\n    const fullContentRemoveComma = post && tagContent?.join(\"\");\r\n    fullContentRemoveComma && setFullcontent(fullContentRemoveComma);\r\n  }, [post]);\r\n\r\n  useEffect(() => {\r\n    const postId = router.pathname;\r\n    if (!postId) {\r\n      router.push(\"/\");\r\n    }\r\n  }, [router.pathname]);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POST_REQUEST,\r\n      data: { postId: router.query.id, UserId: user?.id, category: router.query.category },\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [addCommentDone, unlikePostDone, likePostDone, removeCommentDone, removeSubCommentDone]);\r\n\r\n  useEffect(() => {\r\n    if (addCommentDone) {\r\n      message.success(\"Added comment 🥰\");\r\n    }\r\n  }, [addCommentDone]);\r\n\r\n  const onClickLike = useCallback(() => {\r\n    if (!user) {\r\n      message.error(\"You can thumbs up when you are logged in 😿\");\r\n      return;\r\n    }\r\n    dispatch({\r\n      type: LIKE_POST_REQUEST,\r\n      data: { PostId: post?.id, UserId: user.id },\r\n    });\r\n  }, [post?.id, user?.id]);\r\n\r\n  const handleImgError = useCallback((e: React.SyntheticEvent) => {\r\n    (e.target as HTMLImageElement).src = \"/images/blog/noImage.gif\";\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Noah world | {post?.title.slice(0, 10)}...</title>\r\n      </Head>\r\n      <h1 style={{ lineHeight: \"1.5\" }} className=\"post_main_title\">\r\n        {post?.title}\r\n      </h1>\r\n      <Divider className=\"blog_post_divier\" />\r\n      <ul css={PostDesc}>\r\n        <li>{dayjs(post?.createdAt).format(\"YYYY.MM.DD\")}</li>\r\n        <li>·&nbsp;{post?.hit} views</li>\r\n        <li>·&nbsp;{post?.PostLikers?.length} likes</li>\r\n      </ul>\r\n      <div css={PostWrapper}>\r\n        <div className=\"blog_post_article\">\r\n          <div className=\"tui-editor-contents\" style={{ marginBottom: \"3rem\" }}>\r\n            <img\r\n              alt={post?.title}\r\n              style={{ width: \"100%\", marginBottom: \"6rem\" }}\r\n              src={\r\n                post?.thumbnail\r\n                  ? post?.thumbnail\r\n                  : post?.imagePath\r\n                  ? post?.imagePath.replace(/\\/thumb\\//, \"/original/\")\r\n                  : \"/images/blog/noImage.gif\"\r\n              }\r\n              onError={handleImgError}\r\n            />\r\n            {Fullcontent && parse(Fullcontent)}\r\n          </div>\r\n          <h4 css={PostSubTitle}>\r\n            Do you like this Post?{\" \"}\r\n            {liked ? (\r\n              <HeartLiked onClick={onClickUnlike}>\r\n                <HeartFilled />\r\n              </HeartLiked>\r\n            ) : (\r\n              <Heart onClick={onClickLike}>\r\n                <HeartOutlined />\r\n              </Heart>\r\n            )}\r\n            <span style={{ fontSize: \"1rem\" }}>{post?.PostLikers?.length}</span>\r\n          </h4>\r\n          <CommentForm />\r\n          <h4 css={PostSubTitle}>More posts</h4>\r\n          <div css={MorePostWrapper}>\r\n            <div>\r\n              <span>Title</span>\r\n              <span>Date</span>\r\n            </div>\r\n            {prevPost?.map((article, i) => (\r\n              <ArticlePost key={i} article={article} />\r\n            ))}\r\n            {nextPost?.map((article, i) => (\r\n              <ArticlePost key={i} article={article} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <RemoteControl Fullcontent={Fullcontent} />\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : \"\";\r\n  axios.defaults.headers.Cookie = \"\";\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n    data: { postId: context.params.id, category: context.query.category },\r\n  });\r\n  context.store.dispatch(END);\r\n  await (context.store as IStore).sagaTask.toPromise();\r\n});\r\n\r\nexport default memo(BlogPostPage);\r\n"]},"metadata":{},"sourceType":"module"}