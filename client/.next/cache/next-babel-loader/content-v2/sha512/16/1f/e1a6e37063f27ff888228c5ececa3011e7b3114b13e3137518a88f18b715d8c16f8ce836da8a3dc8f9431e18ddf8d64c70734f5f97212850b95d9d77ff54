{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noah\\\\Desktop\\\\Project\\\\Noahworld\\\\client\\\\pages\\\\[category]\\\\index.tsx\";\nimport { Col, Divider, Row } from \"antd\";\nimport React, { memo, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LOAD_CATEGORY_POSTS_REQUEST, LOAD_MORE_POSTS_REQUEST } from \"../../@reducers/post\";\nimport CountUp from \"react-countup\";\nimport Head from \"next/head\";\nimport dynamic from \"next/dynamic\";\nimport wrapper from \"../../@store/configureStore\";\nimport axios from \"axios\";\nimport { END } from \"@redux-saga/core\";\nimport { useRouter } from \"next/router\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst UserProfile = dynamic(() => import(\"../../components/Blog/Profile/UserProfile\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../../components/Blog/Profile/UserProfile\")],\n    modules: [\"[category]\\\\index.tsx -> \" + \"../../components/Blog/Profile/UserProfile\"]\n  }\n});\nconst ArticleRow = dynamic(() => import(\"../../components/Blog/Articles/ArticleRow\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../../components/Blog/Articles/ArticleRow\")],\n    modules: [\"[category]\\\\index.tsx -> \" + \"../../components/Blog/Articles/ArticleRow\"]\n  }\n});\nconst ArticleColumn = dynamic(() => import(\"../../components/Blog/Articles/ArticleColumn\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../../components/Blog/Articles/ArticleColumn\")],\n    modules: [\"[category]\\\\index.tsx -> \" + \"../../components/Blog/Articles/ArticleColumn\"]\n  }\n});\nconst BlogCategoryPage = /*#__PURE__*/memo(() => {\n  const router = useRouter();\n  const category = router.query.category;\n  const dispatch = useDispatch();\n  const {\n    techPosts,\n    dailyPosts,\n    hasMorePosts,\n    loadMorePostsLoading,\n    countPosts\n  } = useSelector(state => state.post);\n  const {\n    user\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    function onScroll() {\n      if ( //Y축 스크롤 값과 화면에 보이는 페이지 길이\n      window.scrollY + document.documentElement.clientHeight > //전체 페이지의 길이\n      document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadMorePostsLoading && (techPosts || dailyPosts.length > 7)) {\n          //포스트가 더 있고 , 포스트를 로딩중이 아니고 , 포스트가 7개 초과이면 ( )\n          const LastId = (techPosts || dailyPosts) && (techPosts || dailyPosts)[(techPosts || dailyPosts).length - 1].id; // 이미 불러온 포스트들(배열)에 마지막값의 아이디를 가져온다.\n\n          dispatch({\n            type: LOAD_MORE_POSTS_REQUEST,\n            data: {\n              LastId,\n              category\n            }\n          });\n        }\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      //메모리릭을 방지하기위해 unmount시 removeEventListner\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePosts]);\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Noah world | \", category)), user && ___EmotionJSX(UserProfile, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 16\n    }\n  }), ___EmotionJSX(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(\"h2\", {\n    className: \"blog_category_header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, category.toUpperCase() + \" POSTS\", ___EmotionJSX(\"br\", {\n    className: \"br_category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), ___EmotionJSX(\"span\", {\n    className: \"blog_category_count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"+\\xA0\", ___EmotionJSX(CountUp, {\n    duration: 4,\n    start: 0,\n    end: countPosts === null || countPosts === void 0 ? void 0 : countPosts.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), \"\\xA0posts.\")), ___EmotionJSX(\"div\", {\n    className: \"blog_category_big\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(ArticleRow, {\n    article: dailyPosts[0] || techPosts[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), ___EmotionJSX(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  })), ___EmotionJSX(\"div\", {\n    className: \"blog_category_medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(ArticleColumn, {\n    article: dailyPosts[0] || techPosts[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), ___EmotionJSX(Divider, {\n    className: \"blog_category_small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  })), ___EmotionJSX(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, (techPosts || dailyPosts).slice(1).map((v, i) => ___EmotionJSX(Col, {\n    key: i,\n    xs: 24,\n    sm: 12,\n    lg: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(ArticleColumn, {\n    article: v,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }))))));\n});\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  axios.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  let {\n    category\n  } = context.query;\n\n  if (category === \"tech\" || category === \"daily\" || category === \"culture\") {\n    context.store.dispatch({\n      type: LOAD_CATEGORY_POSTS_REQUEST,\n      data: category\n    });\n  } else {\n    return {\n      redirect: {\n        destination: \"/404\"\n      }\n    };\n  }\n\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default /*#__PURE__*/memo(BlogCategoryPage);","map":{"version":3,"sources":["C:/Users/Noah/Desktop/Project/Noahworld/client/pages/[category]/index.tsx"],"names":["Col","Divider","Row","React","memo","useEffect","useDispatch","useSelector","LOAD_CATEGORY_POSTS_REQUEST","LOAD_MORE_POSTS_REQUEST","CountUp","Head","dynamic","wrapper","axios","END","useRouter","UserProfile","ArticleRow","ArticleColumn","BlogCategoryPage","router","category","query","dispatch","techPosts","dailyPosts","hasMorePosts","loadMorePostsLoading","countPosts","state","post","user","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","length","LastId","id","type","data","addEventListener","removeEventListener","toUpperCase","slice","map","v","i","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","redirect","destination","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import { Col, Divider, Row } from \"antd\";\r\nimport React, { memo, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LOAD_CATEGORY_POSTS_REQUEST, LOAD_MORE_POSTS_REQUEST } from \"../../@reducers/post\";\r\nimport CountUp from \"react-countup\";\r\nimport { RootState } from \"../../@reducers\";\r\nimport Head from \"next/head\";\r\nimport dynamic from \"next/dynamic\";\r\nimport wrapper from \"../../@store/configureStore\";\r\nimport axios from \"axios\";\r\nimport { IStore } from \"../../types\";\r\nimport { END } from \"@redux-saga/core\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nconst UserProfile = dynamic(() => import(\"../../components/Blog/Profile/UserProfile\"));\r\nconst ArticleRow = dynamic(() => import(\"../../components/Blog/Articles/ArticleRow\"));\r\nconst ArticleColumn = dynamic(() => import(\"../../components/Blog/Articles/ArticleColumn\"));\r\n\r\nconst BlogCategoryPage = memo(() => {\r\n  const router = useRouter();\r\n  const category = router.query.category;\r\n  const dispatch = useDispatch();\r\n  const { techPosts, dailyPosts, hasMorePosts, loadMorePostsLoading, countPosts } = useSelector(\r\n    (state: RootState) => state.post\r\n  );\r\n  const { user } = useSelector((state: RootState) => state.user);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      if (\r\n        //Y축 스크롤 값과 화면에 보이는 페이지 길이\r\n        window.scrollY + document.documentElement.clientHeight >\r\n        //전체 페이지의 길이\r\n        document.documentElement.scrollHeight - 300\r\n      ) {\r\n        if (hasMorePosts && !loadMorePostsLoading && (techPosts || dailyPosts.length > 7)) {\r\n          //포스트가 더 있고 , 포스트를 로딩중이 아니고 , 포스트가 7개 초과이면 ( )\r\n          const LastId =\r\n            (techPosts || dailyPosts) &&\r\n            (techPosts || dailyPosts)[(techPosts || dailyPosts).length - 1].id;\r\n          // 이미 불러온 포스트들(배열)에 마지막값의 아이디를 가져온다.\r\n          dispatch({\r\n            type: LOAD_MORE_POSTS_REQUEST,\r\n            data: {\r\n              LastId,\r\n              category,\r\n            },\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    return () => {\r\n      //메모리릭을 방지하기위해 unmount시 removeEventListner\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, [hasMorePosts]);\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Noah world | {category}</title>\r\n      </Head>\r\n      {user && <UserProfile />}\r\n      <div>\r\n        <h2 className=\"blog_category_header\">\r\n          {(category as string).toUpperCase() + \" POSTS\"}\r\n          <br className=\"br_category\" />\r\n          <span className=\"blog_category_count\">\r\n            +&nbsp;\r\n            <CountUp duration={4} start={0} end={countPosts?.length} />\r\n            &nbsp;posts.\r\n          </span>\r\n        </h2>\r\n        <div className=\"blog_category_big\">\r\n          <ArticleRow article={dailyPosts[0] || techPosts[0]} />\r\n          <Divider />\r\n        </div>\r\n        <div className=\"blog_category_medium\">\r\n          <ArticleColumn article={dailyPosts[0] || techPosts[0]} />\r\n          <Divider className=\"blog_category_small\" />\r\n        </div>\r\n        <Row>\r\n          {(techPosts || dailyPosts).slice(1).map((v, i) => (\r\n            <Col key={i} xs={24} sm={12} lg={8}>\r\n              <ArticleColumn article={v} />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : \"\";\r\n  axios.defaults.headers.Cookie = \"\";\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  let { category } = context.query;\r\n  if (category === \"tech\" || category === \"daily\" || category === \"culture\") {\r\n    context.store.dispatch({\r\n      type: LOAD_CATEGORY_POSTS_REQUEST,\r\n      data: category,\r\n    });\r\n  } else {\r\n    return {\r\n      redirect: {\r\n        destination: \"/404\",\r\n      },\r\n    };\r\n  }\r\n  context.store.dispatch(END);\r\n  await (context.store as IStore).sagaTask.toPromise();\r\n});\r\n\r\nexport default memo(BlogCategoryPage);\r\n"]},"metadata":{},"sourceType":"module"}