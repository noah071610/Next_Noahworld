{"ast":null,"code":"import _slicedToArray from \"C:/Users/Noah/Desktop/Project/Noahworld/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Noah\\\\Desktop\\\\Project\\\\Noahworld\\\\client\\\\components\\\\Blog\\\\Profile\\\\InfoModal.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Input, message, Form, Modal } from \"antd\";\nimport { useRouter } from \"next/dist/client/router\";\nimport React, { memo, useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CHANGE_NAME_REQUEST, CHANGE_PASSWORD_REQUEST, CONFIRM_PASSWORD_REQUEST, CONFIRM_PASSWORD_SUCCESS, LOG_OUT_REQUEST, WITHDRWAL_REQUEST } from \"../../../@reducers/user\";\nimport useInput from \"../../../util/useInput\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nvar InfoModal = /*#__PURE__*/memo(_c = _s(function (_ref) {\n  _s();\n\n  var setIsModalVisible = _ref.setIsModalVisible,\n      setChangePassword = _ref.setChangePassword,\n      setChangeNickname = _ref.setChangeNickname,\n      isModalVisible = _ref.isModalVisible,\n      changePassword = _ref.changePassword,\n      changeNickname = _ref.changeNickname;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      user = _useSelector.user,\n      confirmPassword = _useSelector.confirmPassword,\n      changePasswordDone = _useSelector.changePasswordDone,\n      confirmPasswordError = _useSelector.confirmPasswordError,\n      changePasswordError = _useSelector.changePasswordError,\n      withdrawalDone = _useSelector.withdrawalDone,\n      withdrawalError = _useSelector.withdrawalError,\n      changeNameDone = _useSelector.changeNameDone,\n      changeNameError = _useSelector.changeNameError;\n\n  var router = useRouter();\n  var userName = user === null || user === void 0 ? void 0 : user.name;\n\n  var _useInput = useInput(\"\"),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      password = _useInput2[0],\n      onChangePassword = _useInput2[1];\n\n  var _useInput3 = useInput(\"\"),\n      _useInput4 = _slicedToArray(_useInput3, 2),\n      newPassword = _useInput4[0],\n      onChangeNewPassword = _useInput4[1];\n\n  var _useInput5 = useInput(userName),\n      _useInput6 = _slicedToArray(_useInput5, 2),\n      newName = _useInput6[0],\n      onChangeNewName = _useInput6[1];\n\n  useEffect(function () {\n    if (user !== null && user !== void 0 && user.googleId) {\n      dispatch({\n        type: CONFIRM_PASSWORD_SUCCESS\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [user]);\n  useEffect(function () {\n    if (changePasswordDone) {\n      message.success(\"Change your password well!\");\n      router.push(\"/\");\n      setIsModalVisible(false);\n      setChangePassword(false);\n      return;\n    }\n\n    if (changeNameDone) {\n      message.success(\"Change your nickname well!\");\n      setIsModalVisible(false);\n      setChangeNickname(false);\n      return;\n    }\n\n    if (withdrawalDone) {\n      setIsModalVisible(false);\n      message.success(\"Withdrawed. Thank you for using ! see you next time.\");\n      router.push(\"/\");\n      return;\n    }\n\n    if (changePasswordError || changeNameError || withdrawalError) {\n      message.error(\"Unexpected Error! please try again or feedback to us\");\n      setChangePassword(false);\n      setChangeNickname(false);\n      return;\n    }\n\n    if (confirmPasswordError) {\n      message.error(\"Wrong Password! please try again or feedback to us\");\n      return;\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [changePasswordDone, changePasswordError, confirmPasswordError, withdrawalDone, withdrawalError, changeNameDone, changeNameError]);\n  var handleOk = useCallback(function () {\n    dispatch({\n      type: CONFIRM_PASSWORD_REQUEST,\n      data: {\n        password: password,\n        user: user\n      }\n    });\n  }, [password, user]);\n  var handleCancel = useCallback(function () {\n    setIsModalVisible(false);\n    setChangePassword(false);\n    setChangeNickname(false);\n  }, []);\n  var onSubmitChangePassword = useCallback(function () {\n    dispatch({\n      type: CHANGE_PASSWORD_REQUEST,\n      data: {\n        newPassword: newPassword,\n        user: user\n      }\n    });\n    dispatch({\n      type: LOG_OUT_REQUEST\n    });\n  }, [newPassword, user]);\n  var onsubmitChangeName = useCallback(function () {\n    dispatch({\n      type: CHANGE_NAME_REQUEST,\n      data: {\n        newName: newName,\n        UserId: user === null || user === void 0 ? void 0 : user.id\n      }\n    });\n  }, [newName, user]);\n  var onSubmitWithdrawal = useCallback(function () {\n    dispatch({\n      type: WITHDRWAL_REQUEST,\n      data: user === null || user === void 0 ? void 0 : user.id\n    });\n    dispatch({\n      type: LOG_OUT_REQUEST\n    });\n  }, [user]);\n  return ___EmotionJSX(Modal, {\n    title: \"User Infomation\",\n    visible: isModalVisible,\n    onOk: confirmPassword ? changePassword ? onSubmitChangePassword : changeNickname ? onsubmitChangeName : onSubmitWithdrawal : handleOk,\n    onCancel: handleCancel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, confirmPassword ? changePassword ? ___EmotionJSX(Form, {\n    name: \"nest-messages\",\n    initialValues: {\n      remember: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 15\n    }\n  }, \"Please write your new password.\"), ___EmotionJSX(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }), ___EmotionJSX(Form.Item, {\n    name: \"Password\",\n    rules: [{\n      required: true\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(Input.Password, {\n    value: newPassword,\n    onChange: onChangeNewPassword,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  })), ___EmotionJSX(Form.Item, {\n    name: \"Confirm\",\n    dependencies: [\"Password\"],\n    hasFeedback: true,\n    rules: [{\n      required: true\n    }, function (_ref2) {\n      var getFieldValue = _ref2.getFieldValue;\n      return {\n        validator: function validator(_, value) {\n          if (!value || getFieldValue(\"Password\") === value) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject(new Error(\"The two passwords that you entered do not match!\"));\n        }\n      };\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(Input.Password, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }))) : changeNickname ? ___EmotionJSX(Form, {\n    name: \"nest-messages\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }\n  }, \"Please write your new nickname.\"), ___EmotionJSX(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }), ___EmotionJSX(Form.Item, {\n    name: \"name\",\n    rules: [{\n      required: true\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(Input, {\n    value: newName,\n    onChange: onChangeNewName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }))) : ___EmotionJSX(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, \"Would you really like to withdraw? \\uD83D\\uDE3F\") : ___EmotionJSX(React.Fragment, null, ___EmotionJSX(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, \"Confirm your password.\"), ___EmotionJSX(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }), ___EmotionJSX(Input.Password, {\n    value: password,\n    onChange: onChangePassword,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  })));\n}, \"K47FTM1TNO0CpWhsrGqp9qqPxhg=\", false, function () {\n  return [useDispatch, useSelector, useRouter, useInput, useInput, useInput];\n}));\n_c2 = InfoModal;\nexport default _c3 = /*#__PURE__*/memo(InfoModal);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"InfoModal$memo\");\n$RefreshReg$(_c2, \"InfoModal\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["C:/Users/Noah/Desktop/Project/Noahworld/client/components/Blog/Profile/InfoModal.tsx"],"names":["Input","message","Form","Modal","useRouter","React","memo","useCallback","useEffect","useDispatch","useSelector","CHANGE_NAME_REQUEST","CHANGE_PASSWORD_REQUEST","CONFIRM_PASSWORD_REQUEST","CONFIRM_PASSWORD_SUCCESS","LOG_OUT_REQUEST","WITHDRWAL_REQUEST","useInput","InfoModal","setIsModalVisible","setChangePassword","setChangeNickname","isModalVisible","changePassword","changeNickname","dispatch","state","user","confirmPassword","changePasswordDone","confirmPasswordError","changePasswordError","withdrawalDone","withdrawalError","changeNameDone","changeNameError","router","userName","name","password","onChangePassword","newPassword","onChangeNewPassword","newName","onChangeNewName","googleId","type","success","push","error","handleOk","data","handleCancel","onSubmitChangePassword","onsubmitChangeName","UserId","id","onSubmitWithdrawal","remember","required","getFieldValue","validator","_","value","Promise","resolve","reject","Error"],"mappings":"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","sourcesContent":["import { Input, message, Form, Modal } from \"antd\";\r\nimport { useRouter } from \"next/dist/client/router\";\r\nimport React, { FC, memo, useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../@reducers\";\r\nimport {\r\n  CHANGE_NAME_REQUEST,\r\n  CHANGE_PASSWORD_REQUEST,\r\n  CONFIRM_PASSWORD_REQUEST,\r\n  CONFIRM_PASSWORD_SUCCESS,\r\n  LOG_OUT_REQUEST,\r\n  WITHDRWAL_REQUEST,\r\n} from \"../../../@reducers/user\";\r\nimport useInput from \"../../../util/useInput\";\r\n\r\ninterface InfoModal {\r\n  setIsModalVisible: (e: boolean) => void;\r\n  setChangePassword: (e: boolean) => void;\r\n  setChangeNickname: (e: boolean) => void;\r\n  isModalVisible: boolean;\r\n  changePassword: boolean;\r\n  changeNickname: boolean;\r\n}\r\n\r\nconst InfoModal: FC<InfoModal> = memo(\r\n  ({\r\n    setIsModalVisible,\r\n    setChangePassword,\r\n    setChangeNickname,\r\n    isModalVisible,\r\n    changePassword,\r\n    changeNickname,\r\n  }) => {\r\n    const dispatch = useDispatch();\r\n    const {\r\n      user,\r\n      confirmPassword,\r\n      changePasswordDone,\r\n      confirmPasswordError,\r\n      changePasswordError,\r\n      withdrawalDone,\r\n      withdrawalError,\r\n      changeNameDone,\r\n      changeNameError,\r\n    } = useSelector((state: RootState) => state.user);\r\n    const router = useRouter();\r\n    const userName: string = user?.name;\r\n\r\n    const [password, onChangePassword] = useInput(\"\");\r\n    const [newPassword, onChangeNewPassword] = useInput(\"\");\r\n    const [newName, onChangeNewName] = useInput(userName);\r\n\r\n    useEffect(() => {\r\n      if (user?.googleId) {\r\n        dispatch({\r\n          type: CONFIRM_PASSWORD_SUCCESS,\r\n        });\r\n      }\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n      if (changePasswordDone) {\r\n        message.success(\"Change your password well!\");\r\n        router.push(\"/\");\r\n        setIsModalVisible(false);\r\n        setChangePassword(false);\r\n        return;\r\n      }\r\n      if (changeNameDone) {\r\n        message.success(\"Change your nickname well!\");\r\n        setIsModalVisible(false);\r\n        setChangeNickname(false);\r\n        return;\r\n      }\r\n      if (withdrawalDone) {\r\n        setIsModalVisible(false);\r\n        message.success(\"Withdrawed. Thank you for using ! see you next time.\");\r\n        router.push(\"/\");\r\n        return;\r\n      }\r\n      if (changePasswordError || changeNameError || withdrawalError) {\r\n        message.error(\"Unexpected Error! please try again or feedback to us\");\r\n        setChangePassword(false);\r\n        setChangeNickname(false);\r\n        return;\r\n      }\r\n      if (confirmPasswordError) {\r\n        message.error(\"Wrong Password! please try again or feedback to us\");\r\n        return;\r\n      }\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [\r\n      changePasswordDone,\r\n      changePasswordError,\r\n      confirmPasswordError,\r\n      withdrawalDone,\r\n      withdrawalError,\r\n      changeNameDone,\r\n      changeNameError,\r\n    ]);\r\n    const handleOk = useCallback(() => {\r\n      dispatch({\r\n        type: CONFIRM_PASSWORD_REQUEST,\r\n        data: { password, user },\r\n      });\r\n    }, [password, user]);\r\n\r\n    const handleCancel = useCallback(() => {\r\n      setIsModalVisible(false);\r\n      setChangePassword(false);\r\n      setChangeNickname(false);\r\n    }, []);\r\n\r\n    const onSubmitChangePassword = useCallback(() => {\r\n      dispatch({\r\n        type: CHANGE_PASSWORD_REQUEST,\r\n        data: { newPassword, user },\r\n      });\r\n      dispatch({\r\n        type: LOG_OUT_REQUEST,\r\n      });\r\n    }, [newPassword, user]);\r\n\r\n    const onsubmitChangeName = useCallback(() => {\r\n      dispatch({\r\n        type: CHANGE_NAME_REQUEST,\r\n        data: { newName, UserId: user?.id },\r\n      });\r\n    }, [newName, user]);\r\n\r\n    const onSubmitWithdrawal = useCallback(() => {\r\n      dispatch({\r\n        type: WITHDRWAL_REQUEST,\r\n        data: user?.id,\r\n      });\r\n      dispatch({\r\n        type: LOG_OUT_REQUEST,\r\n      });\r\n    }, [user]);\r\n\r\n    return (\r\n      <Modal\r\n        title=\"User Infomation\"\r\n        visible={isModalVisible}\r\n        onOk={\r\n          confirmPassword\r\n            ? changePassword\r\n              ? onSubmitChangePassword\r\n              : changeNickname\r\n              ? onsubmitChangeName\r\n              : onSubmitWithdrawal\r\n            : handleOk\r\n        }\r\n        onCancel={handleCancel}\r\n      >\r\n        {confirmPassword ? (\r\n          changePassword ? (\r\n            <Form name=\"nest-messages\" initialValues={{ remember: false }}>\r\n              <p>Please write your new password.</p>\r\n              <br />\r\n              <Form.Item name=\"Password\" rules={[{ required: true }]}>\r\n                <Input.Password value={newPassword} onChange={onChangeNewPassword} />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"Confirm\"\r\n                dependencies={[\"Password\"]}\r\n                hasFeedback\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(_, value) {\r\n                      if (!value || getFieldValue(\"Password\") === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\r\n                        new Error(\"The two passwords that you entered do not match!\")\r\n                      );\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password />\r\n              </Form.Item>\r\n            </Form>\r\n          ) : changeNickname ? (\r\n            <Form name=\"nest-messages\">\r\n              <p>Please write your new nickname.</p>\r\n              <br />\r\n              <Form.Item name=\"name\" rules={[{ required: true }]}>\r\n                <Input value={newName} onChange={onChangeNewName} />\r\n              </Form.Item>\r\n            </Form>\r\n          ) : (\r\n            <h2>Would you really like to withdraw? 😿</h2>\r\n          )\r\n        ) : (\r\n          <>\r\n            <p>Confirm your password.</p>\r\n            <br />\r\n            <Input.Password value={password} onChange={onChangePassword} />\r\n          </>\r\n        )}\r\n      </Modal>\r\n    );\r\n  }\r\n);\r\n\r\nexport default memo(InfoModal);\r\n"]},"metadata":{},"sourceType":"module"}