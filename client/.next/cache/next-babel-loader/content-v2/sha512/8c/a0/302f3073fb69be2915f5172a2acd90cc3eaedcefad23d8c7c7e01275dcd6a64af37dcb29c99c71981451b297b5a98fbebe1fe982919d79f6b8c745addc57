{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LIKE_COMMENT_REQUEST, UNLIKE_COMMENT_REQUEST, ADD_SUB_COMMENT_REQUEST, REMOVE_SUB_COMMENT_REQUEST, EDIT_SUB_COMMENT_REQUEST, REMOVE_COMMENT_REQUEST, EDIT_COMMENT_REQUEST, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_CLEAR, ADD_COMMENT_FAILURE, REMOVE_COMMENT_SUCCESS, REMOVE_COMMENT_FAILURE, EDIT_COMMENT_SUCCESS, EDIT_COMMENT_CLEAR, EDIT_COMMENT_FAILURE, LIKE_COMMENT_SUCCESS, LIKE_COMMENT_FAILURE, UNLIKE_COMMENT_SUCCESS, UNLIKE_COMMENT_FAILURE, ADD_SUB_COMMENT_SUCCESS, ADD_SUB_COMMENT_CLEAR, ADD_SUB_COMMENT_FAILURE, REMOVE_SUB_COMMENT_SUCCESS, REMOVE_SUB_COMMENT_FAILURE, EDIT_SUB_COMMENT_SUCCESS, EDIT_SUB_COMMENT_CLEAR, EDIT_SUB_COMMENT_FAILURE } from \"../@reducers/post\";\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/comment/${data.postId}`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const {\n      data\n    } = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data\n    });\n    yield delay(3000);\n    yield put({\n      type: ADD_COMMENT_CLEAR\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removeCommentAPI(data) {\n  return axios.delete(`/api/comment/${data}`);\n}\n\nfunction* removeComment(action) {\n  try {\n    const {\n      data\n    } = yield call(removeCommentAPI, action.data);\n    yield put({\n      type: REMOVE_COMMENT_SUCCESS,\n      data\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: REMOVE_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction editCommentAPI(data) {\n  return axios.post(`api/comment/edit/${data.CommentId}/`, data);\n}\n\nfunction* editComment(action) {\n  try {\n    const {\n      data\n    } = yield call(editCommentAPI, action.data);\n    yield put({\n      type: EDIT_COMMENT_SUCCESS,\n      data\n    });\n    yield delay(3000);\n    yield put({\n      type: EDIT_COMMENT_CLEAR\n    });\n  } catch (err) {\n    yield put({\n      type: EDIT_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likeCommentAPI(data) {\n  return axios.patch(`/api/comment/like/${data.UserId}/${data.CommentId}`);\n}\n\nfunction* likeComment(action) {\n  try {\n    const {\n      data\n    } = yield call(likeCommentAPI, action.data);\n    yield put({\n      type: LIKE_COMMENT_SUCCESS,\n      data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikeCommentAPI(data) {\n  return axios.delete(`/api/comment/unlike/${data.UserId}/${data.CommentId}`);\n}\n\nfunction* unlikeComment(action) {\n  try {\n    const {\n      data\n    } = yield call(unlikeCommentAPI, action.data);\n    yield put({\n      type: UNLIKE_COMMENT_SUCCESS,\n      data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addSubCommentAPI(data) {\n  return axios.post(`/api/comment/sub/${data.CommentId}`, data);\n}\n\nfunction* addSubComment(action) {\n  try {\n    const {\n      data\n    } = yield call(addSubCommentAPI, action.data);\n    yield put({\n      type: ADD_SUB_COMMENT_SUCCESS,\n      data\n    });\n    yield delay(3000);\n    yield put({\n      type: ADD_SUB_COMMENT_CLEAR\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: ADD_SUB_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removeSubCommentAPI(data) {\n  return axios.delete(`/api/comment/sub/${data.CommentId}/${data.SubCommentId}`);\n}\n\nfunction* removeSubComment(action) {\n  try {\n    const {\n      data\n    } = yield call(removeSubCommentAPI, action.data);\n    yield put({\n      type: REMOVE_SUB_COMMENT_SUCCESS,\n      data\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: REMOVE_SUB_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction editSubCommentAPI(data) {\n  return axios.post(`api/comment/sub/edit/${data.CommentId}/${data.SubCommentId}`, data);\n}\n\nfunction* editSubComment(action) {\n  try {\n    const {\n      data\n    } = yield call(editSubCommentAPI, action.data);\n    console.log(data);\n    yield put({\n      type: EDIT_SUB_COMMENT_SUCCESS,\n      data\n    });\n    yield delay(3000);\n    yield put({\n      type: EDIT_SUB_COMMENT_CLEAR\n    });\n  } catch (err) {\n    yield put({\n      type: EDIT_SUB_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemoveComment() {\n  yield takeLatest(REMOVE_COMMENT_REQUEST, removeComment);\n}\n\nfunction* watchEditComment() {\n  yield takeLatest(EDIT_COMMENT_REQUEST, editComment);\n}\n\nfunction* watchLikeComment() {\n  yield takeLatest(LIKE_COMMENT_REQUEST, likeComment);\n}\n\nfunction* watchUnlikeComment() {\n  yield takeLatest(UNLIKE_COMMENT_REQUEST, unlikeComment);\n}\n\nfunction* watchAddSubComment() {\n  yield takeLatest(ADD_SUB_COMMENT_REQUEST, addSubComment);\n}\n\nfunction* watchRemoveSubComment() {\n  yield takeLatest(REMOVE_SUB_COMMENT_REQUEST, removeSubComment);\n}\n\nfunction* watchEditSubComment() {\n  yield takeLatest(EDIT_SUB_COMMENT_REQUEST, editSubComment);\n}\n\nexport default function* commentSaga() {\n  yield all([fork(watchAddComment), fork(watchRemoveComment), fork(watchEditComment), fork(watchLikeComment), fork(watchUnlikeComment), fork(watchAddSubComment), fork(watchRemoveSubComment), fork(watchEditSubComment)]);\n}","map":{"version":3,"sources":["C:/Users/Noah/Desktop/Project/Noahworld/client/@saga/comment.ts"],"names":["all","call","delay","fork","put","takeLatest","axios","LIKE_COMMENT_REQUEST","UNLIKE_COMMENT_REQUEST","ADD_SUB_COMMENT_REQUEST","REMOVE_SUB_COMMENT_REQUEST","EDIT_SUB_COMMENT_REQUEST","REMOVE_COMMENT_REQUEST","EDIT_COMMENT_REQUEST","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_CLEAR","ADD_COMMENT_FAILURE","REMOVE_COMMENT_SUCCESS","REMOVE_COMMENT_FAILURE","EDIT_COMMENT_SUCCESS","EDIT_COMMENT_CLEAR","EDIT_COMMENT_FAILURE","LIKE_COMMENT_SUCCESS","LIKE_COMMENT_FAILURE","UNLIKE_COMMENT_SUCCESS","UNLIKE_COMMENT_FAILURE","ADD_SUB_COMMENT_SUCCESS","ADD_SUB_COMMENT_CLEAR","ADD_SUB_COMMENT_FAILURE","REMOVE_SUB_COMMENT_SUCCESS","REMOVE_SUB_COMMENT_FAILURE","EDIT_SUB_COMMENT_SUCCESS","EDIT_SUB_COMMENT_CLEAR","EDIT_SUB_COMMENT_FAILURE","addCommentAPI","data","post","postId","addComment","action","type","err","console","log","error","response","removeCommentAPI","delete","removeComment","editCommentAPI","CommentId","editComment","likeCommentAPI","patch","UserId","likeComment","unlikeCommentAPI","unlikeComment","addSubCommentAPI","addSubComment","removeSubCommentAPI","SubCommentId","removeSubComment","editSubCommentAPI","editSubComment","watchAddComment","watchRemoveComment","watchEditComment","watchLikeComment","watchUnlikeComment","watchAddSubComment","watchRemoveSubComment","watchEditSubComment","commentSaga"],"mappings":"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","sourcesContent":["import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  LIKE_COMMENT_REQUEST,\r\n  UNLIKE_COMMENT_REQUEST,\r\n  ADD_SUB_COMMENT_REQUEST,\r\n  REMOVE_SUB_COMMENT_REQUEST,\r\n  EDIT_SUB_COMMENT_REQUEST,\r\n  REMOVE_COMMENT_REQUEST,\r\n  EDIT_COMMENT_REQUEST,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_CLEAR,\r\n  ADD_COMMENT_FAILURE,\r\n  REMOVE_COMMENT_SUCCESS,\r\n  REMOVE_COMMENT_FAILURE,\r\n  EDIT_COMMENT_SUCCESS,\r\n  EDIT_COMMENT_CLEAR,\r\n  EDIT_COMMENT_FAILURE,\r\n  LIKE_COMMENT_SUCCESS,\r\n  LIKE_COMMENT_FAILURE,\r\n  UNLIKE_COMMENT_SUCCESS,\r\n  UNLIKE_COMMENT_FAILURE,\r\n  ADD_SUB_COMMENT_SUCCESS,\r\n  ADD_SUB_COMMENT_CLEAR,\r\n  ADD_SUB_COMMENT_FAILURE,\r\n  REMOVE_SUB_COMMENT_SUCCESS,\r\n  REMOVE_SUB_COMMENT_FAILURE,\r\n  EDIT_SUB_COMMENT_SUCCESS,\r\n  EDIT_SUB_COMMENT_CLEAR,\r\n  EDIT_SUB_COMMENT_FAILURE,\r\n} from \"../@reducers/post\";\r\nimport {\r\n  AddCommentData,\r\n  AddCommentInter,\r\n  AddSubCommentData,\r\n  AddSubCommentInter,\r\n  EditCommentData,\r\n  EditCommentInter,\r\n  EditSubCommentInter,\r\n  LikeCommentData,\r\n  LikeCommentInter,\r\n  RemoveCommentInter,\r\n  RemoveSubCommentInter,\r\n  SubCommentData,\r\n  UnlikeCommentInter,\r\n} from \"./@sagaTypes\";\r\n\r\nfunction addCommentAPI(data: AddCommentData) {\r\n  return axios.post(`/api/comment/${data.postId}`, data);\r\n}\r\n\r\nfunction* addComment(action: AddCommentInter) {\r\n  try {\r\n    const { data } = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: ADD_COMMENT_CLEAR,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removeCommentAPI(data: number) {\r\n  return axios.delete(`/api/comment/${data}`);\r\n}\r\n\r\nfunction* removeComment(action: RemoveCommentInter) {\r\n  try {\r\n    const { data } = yield call(removeCommentAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_COMMENT_SUCCESS,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n    yield put({\r\n      type: REMOVE_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction editCommentAPI(data: EditCommentData) {\r\n  return axios.post(`api/comment/edit/${data.CommentId}/`, data);\r\n}\r\n\r\nfunction* editComment(action: EditCommentInter) {\r\n  try {\r\n    const { data } = yield call(editCommentAPI, action.data);\r\n    yield put({\r\n      type: EDIT_COMMENT_SUCCESS,\r\n      data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: EDIT_COMMENT_CLEAR,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: EDIT_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction likeCommentAPI(data: LikeCommentData) {\r\n  return axios.patch(`/api/comment/like/${data.UserId}/${data.CommentId}`);\r\n}\r\n\r\nfunction* likeComment(action: LikeCommentInter) {\r\n  try {\r\n    const { data } = yield call(likeCommentAPI, action.data);\r\n    yield put({\r\n      type: LIKE_COMMENT_SUCCESS,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikeCommentAPI(data: LikeCommentData) {\r\n  return axios.delete(`/api/comment/unlike/${data.UserId}/${data.CommentId}`);\r\n}\r\n\r\nfunction* unlikeComment(action: UnlikeCommentInter) {\r\n  try {\r\n    const { data } = yield call(unlikeCommentAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_COMMENT_SUCCESS,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addSubCommentAPI(data: AddSubCommentData) {\r\n  return axios.post(`/api/comment/sub/${data.CommentId}`, data);\r\n}\r\n\r\nfunction* addSubComment(action: AddSubCommentInter) {\r\n  try {\r\n    const { data } = yield call(addSubCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_SUB_COMMENT_SUCCESS,\r\n      data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: ADD_SUB_COMMENT_CLEAR,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n    yield put({\r\n      type: ADD_SUB_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removeSubCommentAPI(data: SubCommentData) {\r\n  return axios.delete(`/api/comment/sub/${data.CommentId}/${data.SubCommentId}`);\r\n}\r\n\r\nfunction* removeSubComment(action: RemoveSubCommentInter) {\r\n  try {\r\n    const { data } = yield call(removeSubCommentAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_SUB_COMMENT_SUCCESS,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n    yield put({\r\n      type: REMOVE_SUB_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction editSubCommentAPI(data: SubCommentData) {\r\n  return axios.post(`api/comment/sub/edit/${data.CommentId}/${data.SubCommentId}`, data);\r\n}\r\n\r\nfunction* editSubComment(action: EditSubCommentInter) {\r\n  try {\r\n    const { data } = yield call(editSubCommentAPI, action.data);\r\n    console.log(data);\r\n    yield put({\r\n      type: EDIT_SUB_COMMENT_SUCCESS,\r\n      data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: EDIT_SUB_COMMENT_CLEAR,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: EDIT_SUB_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchRemoveComment() {\r\n  yield takeLatest(REMOVE_COMMENT_REQUEST, removeComment);\r\n}\r\nfunction* watchEditComment() {\r\n  yield takeLatest(EDIT_COMMENT_REQUEST, editComment);\r\n}\r\nfunction* watchLikeComment() {\r\n  yield takeLatest(LIKE_COMMENT_REQUEST, likeComment);\r\n}\r\nfunction* watchUnlikeComment() {\r\n  yield takeLatest(UNLIKE_COMMENT_REQUEST, unlikeComment);\r\n}\r\nfunction* watchAddSubComment() {\r\n  yield takeLatest(ADD_SUB_COMMENT_REQUEST, addSubComment);\r\n}\r\nfunction* watchRemoveSubComment() {\r\n  yield takeLatest(REMOVE_SUB_COMMENT_REQUEST, removeSubComment);\r\n}\r\nfunction* watchEditSubComment() {\r\n  yield takeLatest(EDIT_SUB_COMMENT_REQUEST, editSubComment);\r\n}\r\n\r\nexport default function* commentSaga() {\r\n  yield all([\r\n    fork(watchAddComment),\r\n    fork(watchRemoveComment),\r\n    fork(watchEditComment),\r\n    fork(watchLikeComment),\r\n    fork(watchUnlikeComment),\r\n    fork(watchAddSubComment),\r\n    fork(watchRemoveSubComment),\r\n    fork(watchEditSubComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}