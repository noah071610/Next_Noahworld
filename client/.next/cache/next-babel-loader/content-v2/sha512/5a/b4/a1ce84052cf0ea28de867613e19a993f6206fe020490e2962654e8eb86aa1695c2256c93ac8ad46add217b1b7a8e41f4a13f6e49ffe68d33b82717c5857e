{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_CATEGORY_POSTS_REQUEST, LOAD_CATEGORY_POSTS_FAILURE, LOAD_CATEGORY_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, LOAD_CLASS_POSTS_REQUEST, LOAD_CLASS_POSTS_SUCCESS, LOAD_CLASS_POSTS_FAILURE, EDIT_POST_REQUEST, EDIT_POST_FAILURE, EDIT_POST_SUCCESS, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_CLEAR, LOAD_MORE_POSTS_REQUEST, LOAD_MORE_POSTS_SUCCESS, LOAD_MORE_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, ADD_POST_CLEAR, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_CLEAR, LOAD_RECENT_POSTS_REQUEST, LOAD_RECENT_POSTS_SUCCESS, LOAD_RECENT_POSTS_FAILURE, UPLOAD_POST_IMAGE_REQUEST, UPLOAD_POST_IMAGE_SUCCESS, UPLOAD_POST_IMAGE_CLEAR, UPLOAD_POST_IMAGE_FAILURE, EDIT_POST_CLEAR } from \"../@reducers/post\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const {\n      data\n    } = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data\n    });\n    yield delay(3000);\n    yield put({\n      type: ADD_POST_CLEAR\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.get(`/api/post`);\n}\n\nfunction* loadPosts() {\n  try {\n    const {\n      data\n    } = yield call(loadPostsAPI);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadCategoryPostsAPI(data) {\n  return axios.get(`/api/post/category/${data}`);\n}\n\nfunction* loadCategoryPosts(action) {\n  try {\n    const {\n      data\n    } = yield call(loadCategoryPostsAPI, action.data);\n    yield put({\n      type: LOAD_CATEGORY_POSTS_SUCCESS,\n      data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_CATEGORY_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadMorePostsAPI(data) {\n  return axios.get(`/api/post/morepost/${data.category}?lastId=${data.LastId}`);\n}\n\nfunction* loadMorePosts(action) {\n  try {\n    const {\n      data\n    } = yield call(loadMorePostsAPI, action.data);\n    yield put({\n      type: LOAD_MORE_POSTS_SUCCESS,\n      data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MORE_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadClassPostsAPI() {\n  return axios.get(`/api/post/class`);\n}\n\nfunction* loadClassPosts() {\n  try {\n    const {\n      data\n    } = yield call(loadClassPostsAPI);\n    yield put({\n      type: LOAD_CLASS_POSTS_SUCCESS,\n      data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_CLASS_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/api/post/onePost/${data.postId}/${data.UserId}/${data.category}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const {\n      data\n    } = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadRecentPostsAPI(data) {\n  return axios.post(`/api/post/recent`, data);\n}\n\nfunction* loadRecentPosts(action) {\n  try {\n    const {\n      data\n    } = yield call(loadRecentPostsAPI, action.data);\n    yield put({\n      type: LOAD_RECENT_POSTS_SUCCESS,\n      data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_RECENT_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/api/post/like/${data.PostId}/${data.UserId}`);\n}\n\nfunction* likePost(action) {\n  try {\n    const {\n      data\n    } = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/api/post/like/${data.PostId}/${data.UserId}`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const {\n      data\n    } = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/api/post/images\", data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const {\n      data\n    } = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data\n    });\n    yield delay(3000);\n    yield put({\n      type: UPLOAD_IMAGES_CLEAR\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadPostImageAPI(data) {\n  return axios.post(\"/api/post/image\", data);\n}\n\nfunction* uploadPostImage(action) {\n  try {\n    const {\n      data\n    } = yield call(uploadPostImageAPI, action.data);\n    yield put({\n      type: UPLOAD_POST_IMAGE_SUCCESS,\n      data\n    });\n    yield delay(3000);\n    yield put({\n      type: UPLOAD_POST_IMAGE_CLEAR\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_POST_IMAGE_FAILURE,\n      error: err.response.data\n    });\n    yield delay(3000);\n    yield put({\n      type: UPLOAD_POST_IMAGE_CLEAR\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post(`api/post/delete`, data);\n}\n\nfunction* removePost(action) {\n  try {\n    const {\n      data\n    } = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data\n    });\n    yield delay(3000);\n    yield put({\n      type: REMOVE_POST_CLEAR\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction editPostAPI(data) {\n  return axios.post(`api/post/edit`, data);\n}\n\nfunction* editPost(action) {\n  try {\n    const {\n      data\n    } = yield call(editPostAPI, action.data);\n    yield put({\n      type: EDIT_POST_SUCCESS,\n      data\n    });\n    yield delay(3000);\n    yield put({\n      type: EDIT_POST_CLEAR\n    });\n  } catch (err) {\n    yield put({\n      type: EDIT_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchloadCategoryPosts() {\n  yield takeLatest(LOAD_CATEGORY_POSTS_REQUEST, loadCategoryPosts);\n}\n\nfunction* watchloadMorePosts() {\n  yield takeLatest(LOAD_MORE_POSTS_REQUEST, loadMorePosts);\n}\n\nfunction* watchLoadRecentPosts() {\n  yield takeLatest(LOAD_RECENT_POSTS_REQUEST, loadRecentPosts);\n}\n\nfunction* watchloadClassPosts() {\n  yield takeLatest(LOAD_CLASS_POSTS_REQUEST, loadClassPosts);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchEditPost() {\n  yield takeLatest(EDIT_POST_REQUEST, editPost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchUploadPostImage() {\n  yield takeLatest(UPLOAD_POST_IMAGE_REQUEST, uploadPostImage);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchloadCategoryPosts), fork(watchloadMorePosts), fork(watchloadClassPosts), fork(watchLoadPost), fork(watchLoadRecentPosts), fork(watchLikePost), fork(watchUnlikePost), fork(watchUploadImages), fork(watchUploadPostImage), fork(watchRemovePost), fork(watchEditPost)]);\n}","map":{"version":3,"sources":["C:/Users/Noah/Desktop/Project/Noahworld/client/@saga/post.ts"],"names":["all","call","delay","fork","put","takeLatest","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_CATEGORY_POSTS_REQUEST","LOAD_CATEGORY_POSTS_FAILURE","LOAD_CATEGORY_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_CLASS_POSTS_REQUEST","LOAD_CLASS_POSTS_SUCCESS","LOAD_CLASS_POSTS_FAILURE","EDIT_POST_REQUEST","EDIT_POST_FAILURE","EDIT_POST_SUCCESS","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_CLEAR","LOAD_MORE_POSTS_REQUEST","LOAD_MORE_POSTS_SUCCESS","LOAD_MORE_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","ADD_POST_CLEAR","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_CLEAR","LOAD_RECENT_POSTS_REQUEST","LOAD_RECENT_POSTS_SUCCESS","LOAD_RECENT_POSTS_FAILURE","UPLOAD_POST_IMAGE_REQUEST","UPLOAD_POST_IMAGE_SUCCESS","UPLOAD_POST_IMAGE_CLEAR","UPLOAD_POST_IMAGE_FAILURE","EDIT_POST_CLEAR","addPostAPI","data","post","addPost","action","type","err","error","response","loadPostsAPI","get","loadPosts","loadCategoryPostsAPI","loadCategoryPosts","loadMorePostsAPI","category","LastId","loadMorePosts","loadClassPostsAPI","loadClassPosts","loadPostAPI","postId","UserId","loadPost","loadRecentPostsAPI","loadRecentPosts","likePostAPI","patch","PostId","likePost","console","unlikePostAPI","delete","unlikePost","uploadImagesAPI","uploadImages","uploadPostImageAPI","uploadPostImage","removePostAPI","removePost","editPostAPI","editPost","watchAddPost","watchLoadPosts","watchloadCategoryPosts","watchloadMorePosts","watchLoadRecentPosts","watchloadClassPosts","watchLoadPost","watchLikePost","watchUnlikePost","watchRemovePost","watchEditPost","watchUploadImages","watchUploadPostImage","postSaga"],"mappings":"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","sourcesContent":["import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  LOAD_CATEGORY_POSTS_REQUEST,\r\n  LOAD_CATEGORY_POSTS_FAILURE,\r\n  LOAD_CATEGORY_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  UNLIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  LOAD_CLASS_POSTS_REQUEST,\r\n  LOAD_CLASS_POSTS_SUCCESS,\r\n  LOAD_CLASS_POSTS_FAILURE,\r\n  EDIT_POST_REQUEST,\r\n  EDIT_POST_FAILURE,\r\n  EDIT_POST_SUCCESS,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_CLEAR,\r\n  LOAD_MORE_POSTS_REQUEST,\r\n  LOAD_MORE_POSTS_SUCCESS,\r\n  LOAD_MORE_POSTS_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  ADD_POST_CLEAR,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_CLEAR,\r\n  LOAD_RECENT_POSTS_REQUEST,\r\n  LOAD_RECENT_POSTS_SUCCESS,\r\n  LOAD_RECENT_POSTS_FAILURE,\r\n  UPLOAD_POST_IMAGE_REQUEST,\r\n  UPLOAD_POST_IMAGE_SUCCESS,\r\n  UPLOAD_POST_IMAGE_CLEAR,\r\n  UPLOAD_POST_IMAGE_FAILURE,\r\n  EDIT_POST_CLEAR,\r\n} from \"../@reducers/post\";\r\nimport {\r\n  AddPostInter,\r\n  EditPostInter,\r\n  LikePostData,\r\n  LikePostInter,\r\n  LoadCategoryInter,\r\n  LoadMorePostsData,\r\n  LoadMorePostsInter,\r\n  LoadPostData,\r\n  LoadPostInter,\r\n  LoadRecentPostInter,\r\n  NewPostData,\r\n  RemovePostData,\r\n  RemovePostInter,\r\n  UploadImageData,\r\n  UploadImageInter,\r\n  UploadPostImageInter,\r\n} from \"./@sagaTypes\";\r\nimport { UserInter } from \"../@reducers/@reducerTypes\";\r\n\r\nfunction addPostAPI(data: NewPostData) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action: AddPostInter) {\r\n  try {\r\n    const { data } = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: ADD_POST_CLEAR,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI() {\r\n  return axios.get(`/api/post`);\r\n}\r\n\r\nfunction* loadPosts() {\r\n  try {\r\n    const { data } = yield call(loadPostsAPI);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadCategoryPostsAPI(data: string) {\r\n  return axios.get(`/api/post/category/${data}`);\r\n}\r\n\r\nfunction* loadCategoryPosts(action: LoadCategoryInter) {\r\n  try {\r\n    const { data } = yield call(loadCategoryPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_CATEGORY_POSTS_SUCCESS,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_CATEGORY_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadMorePostsAPI(data: LoadMorePostsData) {\r\n  return axios.get(`/api/post/morepost/${data.category}?lastId=${data.LastId}`);\r\n}\r\n\r\nfunction* loadMorePosts(action: LoadMorePostsInter) {\r\n  try {\r\n    const { data } = yield call(loadMorePostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_MORE_POSTS_SUCCESS,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_MORE_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadClassPostsAPI() {\r\n  return axios.get(`/api/post/class`);\r\n}\r\n\r\nfunction* loadClassPosts() {\r\n  try {\r\n    const { data } = yield call(loadClassPostsAPI);\r\n    yield put({\r\n      type: LOAD_CLASS_POSTS_SUCCESS,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_CLASS_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostAPI(data: LoadPostData) {\r\n  return axios.get(`/api/post/onePost/${data.postId}/${data.UserId}/${data.category}`);\r\n}\r\nfunction* loadPost(action: LoadPostInter) {\r\n  try {\r\n    const { data } = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction loadRecentPostsAPI(data: UserInter) {\r\n  return axios.post(`/api/post/recent`, data);\r\n}\r\nfunction* loadRecentPosts(action: LoadRecentPostInter) {\r\n  try {\r\n    const { data } = yield call(loadRecentPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_RECENT_POSTS_SUCCESS,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_RECENT_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction likePostAPI(data: LikePostData) {\r\n  return axios.patch(`/api/post/like/${data.PostId}/${data.UserId}`);\r\n}\r\n\r\nfunction* likePost(action: LikePostInter) {\r\n  try {\r\n    const { data } = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data: LikePostData) {\r\n  return axios.delete(`/api/post/like/${data.PostId}/${data.UserId}`);\r\n}\r\n\r\nfunction* unlikePost(action: LikePostInter) {\r\n  try {\r\n    const { data } = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction uploadImagesAPI(data: UploadImageData) {\r\n  return axios.post(\"/api/post/images\", data);\r\n}\r\n\r\nfunction* uploadImages(action: UploadImageInter) {\r\n  try {\r\n    const { data } = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_CLEAR,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction uploadPostImageAPI(data: UploadImageData) {\r\n  return axios.post(\"/api/post/image\", data);\r\n}\r\n\r\nfunction* uploadPostImage(action: UploadPostImageInter) {\r\n  try {\r\n    const { data } = yield call(uploadPostImageAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_POST_IMAGE_SUCCESS,\r\n      data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: UPLOAD_POST_IMAGE_CLEAR,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UPLOAD_POST_IMAGE_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: UPLOAD_POST_IMAGE_CLEAR,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data: RemovePostData) {\r\n  return axios.post(`api/post/delete`, data);\r\n}\r\n\r\nfunction* removePost(action: RemovePostInter) {\r\n  try {\r\n    const { data } = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: REMOVE_POST_CLEAR,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction editPostAPI(data: NewPostData) {\r\n  return axios.post(`api/post/edit`, data);\r\n}\r\n\r\nfunction* editPost(action: EditPostInter) {\r\n  try {\r\n    const { data } = yield call(editPostAPI, action.data);\r\n    yield put({\r\n      type: EDIT_POST_SUCCESS,\r\n      data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: EDIT_POST_CLEAR,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: EDIT_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchloadCategoryPosts() {\r\n  yield takeLatest(LOAD_CATEGORY_POSTS_REQUEST, loadCategoryPosts);\r\n}\r\nfunction* watchloadMorePosts() {\r\n  yield takeLatest(LOAD_MORE_POSTS_REQUEST, loadMorePosts);\r\n}\r\nfunction* watchLoadRecentPosts() {\r\n  yield takeLatest(LOAD_RECENT_POSTS_REQUEST, loadRecentPosts);\r\n}\r\nfunction* watchloadClassPosts() {\r\n  yield takeLatest(LOAD_CLASS_POSTS_REQUEST, loadClassPosts);\r\n}\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchEditPost() {\r\n  yield takeLatest(EDIT_POST_REQUEST, editPost);\r\n}\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchUploadPostImage() {\r\n  yield takeLatest(UPLOAD_POST_IMAGE_REQUEST, uploadPostImage);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchloadCategoryPosts),\r\n    fork(watchloadMorePosts),\r\n    fork(watchloadClassPosts),\r\n    fork(watchLoadPost),\r\n    fork(watchLoadRecentPosts),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchUploadImages),\r\n    fork(watchUploadPostImage),\r\n    fork(watchRemovePost),\r\n    fork(watchEditPost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}