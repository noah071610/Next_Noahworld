{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noah\\\\Desktop\\\\Project\\\\Noahworld\\\\client\\\\components\\\\Blog\\\\Profile\\\\CropImageModal.tsx\";\nimport { Input } from \"antd\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport React, { memo, useCallback, useEffect, useRef, useState } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport { useDispatch } from \"react-redux\";\nimport { ADD_ICON_REQUEST } from \"../../../@reducers/user\";\nimport useInput from \"../../../util/useInput\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst CropImageModal = /*#__PURE__*/memo(({\n  isModalVisible,\n  setIsModalVisible,\n  user\n}) => {\n  const dispatch = useDispatch();\n  const [url, onChangeUrl, setUrl] = useInput(\"\");\n  const {\n    0: upImg,\n    1: setUpImg\n  } = useState(null);\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  const {\n    0: completedCrop,\n    1: setCompletedCrop\n  } = useState(null);\n  const {\n    0: blob,\n    1: setBlob\n  } = useState(null);\n  const {\n    0: crop,\n    1: setCrop\n  } = useState({\n    unit: \"px\",\n    width: 200,\n    aspect: 1 / 1\n  });\n  const handleOk = useCallback(() => {\n    //5. blob 객체와 user id를 서버에 요청하기위해 form을 만듭니다.\n    const form = new FormData();\n    form.append(\"image\", blob);\n    form.append(\"id\", String(user === null || user === void 0 ? void 0 : user.id));\n    dispatch({\n      type: ADD_ICON_REQUEST,\n      data: form\n    });\n    setIsModalVisible(false);\n    setUrl(\"\");\n    setUpImg(null);\n  }, [blob, user === null || user === void 0 ? void 0 : user.id]);\n  const handleCancel = useCallback(() => {\n    setIsModalVisible(false);\n    setUrl(\"\");\n    setUpImg(null);\n  }, []);\n\n  const onSelectFile = e => {\n    //1-1. React-crop 공식문서의 내용입니다. 이미지를 로드해줍니다.\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n  useEffect(() => {\n    //3. React-crop 공식문서의 내용입니다. canvas에 자른 이미지를 표시하는 함수입니다.\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return;\n    }\n\n    const image = imgRef.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext(\"2d\");\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = \"high\";\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    new Promise(() => {\n      canvas.toBlob( //4. 자른 이미지를 Blob 객체로 바꿔 state에 저장합니다.\n      blob => {\n        setBlob(blob);\n      }, \"image/png\", 1);\n    });\n  }, [completedCrop]);\n  return ___EmotionJSX(Modal, {\n    title: \"Icon Upload \\uD83D\\uDDBC\\uFE0F\",\n    visible: isModalVisible,\n    onOk: handleOk,\n    onCancel: handleCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, \"Set icon from Local storage\"), ___EmotionJSX(\"input\", {\n    style: {\n      marginBottom: \"1.5rem\"\n    },\n    type: \"file\",\n    accept: \"image/*\",\n    disabled: url ? true : false,\n    onChange: onSelectFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }), ___EmotionJSX(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, \"Set icon by using URL\"), ___EmotionJSX(Input, {\n    disabled: upImg ? true : false,\n    value: url,\n    onChange: onChangeUrl,\n    placeholder: \"https://\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), (url || upImg) && ___EmotionJSX(React.Fragment, null, ___EmotionJSX(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, \"Crop the image for icon size.\"), ___EmotionJSX(ReactCrop, {\n    crossorigin: \"anonymous\",\n    style: {\n      width: \"100%\"\n    },\n    imageStyle: {\n      width: \"100%\"\n    },\n    src: upImg || url,\n    onImageLoaded: onLoad,\n    crop: crop,\n    onChange: c => setCrop(c),\n    onComplete: c => setCompletedCrop(c),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }), ___EmotionJSX(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"canvas\", {\n    ref: previewCanvasRef,\n    style: {\n      width: \"50%\",\n      height: \"50%\",\n      borderRadius: \"50%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  })), ___EmotionJSX(\"h2\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, user === null || user === void 0 ? void 0 : user.name)));\n});\nexport default /*#__PURE__*/memo(CropImageModal);","map":{"version":3,"sources":["C:/Users/Noah/Desktop/Project/Noahworld/client/components/Blog/Profile/CropImageModal.tsx"],"names":["Input","Modal","React","memo","useCallback","useEffect","useRef","useState","ReactCrop","useDispatch","ADD_ICON_REQUEST","useInput","CropImageModal","isModalVisible","setIsModalVisible","user","dispatch","url","onChangeUrl","setUrl","upImg","setUpImg","imgRef","previewCanvasRef","completedCrop","setCompletedCrop","blob","setBlob","crop","setCrop","unit","width","aspect","handleOk","form","FormData","append","String","id","type","data","handleCancel","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onLoad","img","current","image","canvas","scaleX","naturalWidth","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","Promise","toBlob","marginBottom","c","display","justifyContent","borderRadius","textAlign","name"],"mappings":"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","sourcesContent":["import { Input } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport React, { FC, memo, useCallback, useEffect, useRef, useState } from \"react\";\r\nimport ReactCrop, { Crop } from \"react-image-crop\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { UserInter } from \"../../../@reducers/@reducerTypes\";\r\nimport { ADD_ICON_REQUEST } from \"../../../@reducers/user\";\r\nimport useInput from \"../../../util/useInput\";\r\n\r\ninterface CropImageModal {\r\n  user: UserInter;\r\n  setIsModalVisible: (e: boolean) => void;\r\n  isModalVisible: boolean;\r\n}\r\n\r\nconst CropImageModal: FC<CropImageModal> = memo(({ isModalVisible, setIsModalVisible, user }) => {\r\n  const dispatch = useDispatch();\r\n  const [url, onChangeUrl, setUrl] = useInput(\"\");\r\n  const [upImg, setUpImg] = useState<ArrayBuffer | string | null>(null);\r\n  const imgRef = useRef(null);\r\n  const previewCanvasRef = useRef(null);\r\n  const [completedCrop, setCompletedCrop] = useState<any>(null);\r\n  const [blob, setBlob] = useState<Blob | null>(null);\r\n  const [crop, setCrop] = useState<Crop>({ unit: \"px\", width: 200, aspect: 1 / 1 });\r\n\r\n  const handleOk = useCallback(() => {\r\n    //5. blob 객체와 user id를 서버에 요청하기위해 form을 만듭니다.\r\n    const form = new FormData();\r\n    form.append(\"image\", blob!);\r\n    form.append(\"id\", String(user?.id));\r\n    dispatch({\r\n      type: ADD_ICON_REQUEST,\r\n      data: form,\r\n    });\r\n    setIsModalVisible(false);\r\n    setUrl(\"\");\r\n    setUpImg(null);\r\n  }, [blob, user?.id]);\r\n\r\n  const handleCancel = useCallback(() => {\r\n    setIsModalVisible(false);\r\n    setUrl(\"\");\r\n    setUpImg(null);\r\n  }, []);\r\n\r\n  const onSelectFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    //1-1. React-crop 공식문서의 내용입니다. 이미지를 로드해줍니다.\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onLoad = useCallback((img) => {\r\n    imgRef.current = img;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    //3. React-crop 공식문서의 내용입니다. canvas에 자른 이미지를 표시하는 함수입니다.\r\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\r\n      return;\r\n    }\r\n    const image: any = imgRef.current;\r\n    const canvas: any = previewCanvasRef.current;\r\n    const crop: any = completedCrop;\r\n\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const pixelRatio = window.devicePixelRatio;\r\n\r\n    canvas.width = crop.width * pixelRatio;\r\n    canvas.height = crop.height * pixelRatio;\r\n\r\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    ctx.imageSmoothingQuality = \"high\";\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n    new Promise(() => {\r\n      canvas.toBlob(\r\n        //4. 자른 이미지를 Blob 객체로 바꿔 state에 저장합니다.\r\n        (blob: Blob) => {\r\n          setBlob(blob);\r\n        },\r\n        \"image/png\",\r\n        1\r\n      );\r\n    });\r\n  }, [completedCrop]);\r\n\r\n  return (\r\n    <Modal title=\"Icon Upload 🖼️\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n      <h3>Set icon from Local storage</h3>\r\n      {/* 1. Url을 이용해 아이콘을 업로드할지, file을 이용할지 선택합니다. */}\r\n      <input\r\n        style={{ marginBottom: \"1.5rem\" }}\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        disabled={url ? true : false}\r\n        onChange={onSelectFile}\r\n      />\r\n      <h3>Set icon by using URL</h3>\r\n      <Input\r\n        disabled={upImg ? true : false}\r\n        value={url}\r\n        onChange={onChangeUrl}\r\n        placeholder=\"https://\"\r\n      />\r\n\r\n      {(url || upImg) && (\r\n        <>\r\n          {/* 2. 올린 이미지를 활용해 이미지를 자릅니다. */}\r\n          <h3>Crop the image for icon size.</h3>\r\n          <ReactCrop\r\n            crossorigin=\"anonymous\"\r\n            style={{ width: \"100%\" }}\r\n            imageStyle={{ width: \"100%\" }}\r\n            src={upImg || url}\r\n            onImageLoaded={onLoad}\r\n            crop={crop}\r\n            onChange={(c) => setCrop(c)}\r\n            onComplete={(c) => setCompletedCrop(c)}\r\n          />\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <canvas\r\n              ref={previewCanvasRef}\r\n              style={{\r\n                width: \"50%\",\r\n                height: \"50%\",\r\n                borderRadius: \"50%\",\r\n              }}\r\n            />\r\n          </div>\r\n          <h2 style={{ textAlign: \"center\" }}>{user?.name}</h2>\r\n        </>\r\n      )}\r\n    </Modal>\r\n  );\r\n});\r\n\r\nexport default memo(CropImageModal);\r\n"]},"metadata":{},"sourceType":"module"}