{"ast":null,"code":"import { Col, Divider, Row } from \"antd\";\nimport React, { memo, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LOAD_MORE_POSTS_REQUEST } from \"../../@reducers/post\";\nimport CountUp from \"react-countup\";\nimport Head from \"next/head\";\nimport dynamic from \"next/dynamic\";\nimport { useRouter } from \"next/router\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nvar UserProfile = dynamic(function () {\n  return import(\"../../components/Blog/Profile/UserProfile\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../../components/Blog/Profile/UserProfile\")];\n    },\n    modules: [\"[category]\\\\index.tsx -> \" + \"../../components/Blog/Profile/UserProfile\"]\n  }\n});\nvar ArticleRow = dynamic(function () {\n  return import(\"../../components/Blog/Articles/ArticleRow\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../../components/Blog/Articles/ArticleRow\")];\n    },\n    modules: [\"[category]\\\\index.tsx -> \" + \"../../components/Blog/Articles/ArticleRow\"]\n  }\n});\nvar ArticleColumn = dynamic(function () {\n  return import(\"../../components/Blog/Articles/ArticleColumn\");\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../../components/Blog/Articles/ArticleColumn\")];\n    },\n    modules: [\"[category]\\\\index.tsx -> \" + \"../../components/Blog/Articles/ArticleColumn\"]\n  }\n});\nvar BlogCategoryPage = /*#__PURE__*/memo(function () {\n  var router = useRouter();\n  var category = router.query.category;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      techPosts = _useSelector.techPosts,\n      dailyPosts = _useSelector.dailyPosts,\n      hasMorePosts = _useSelector.hasMorePosts,\n      loadMorePostsLoading = _useSelector.loadMorePostsLoading,\n      countPosts = _useSelector.countPosts;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      user = _useSelector2.user;\n\n  useEffect(function () {\n    function onScroll() {\n      if ( //Y축 스크롤 값과 화면에 보이는 페이지 길이\n      window.scrollY + document.documentElement.clientHeight > //전체 페이지의 길이\n      document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadMorePostsLoading && (techPosts || dailyPosts.length > 7)) {\n          //포스트가 더 있고 , 포스트를 로딩중이 아니고 , 포스트가 7개 초과이면 ( )\n          var LastId = (techPosts || dailyPosts) && (techPosts || dailyPosts)[(techPosts || dailyPosts).length - 1].id; // 이미 불러온 포스트들(배열)에 마지막값의 아이디를 가져온다.\n\n          dispatch({\n            type: LOAD_MORE_POSTS_REQUEST,\n            data: {\n              LastId: LastId,\n              category: category\n            }\n          });\n        }\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll);\n    return function () {\n      //메모리릭을 방지하기위해 unmount시 removeEventListner\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePosts]);\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Head, null, ___EmotionJSX(\"title\", null, \"Noah world | \", category)), user && ___EmotionJSX(UserProfile, null), ___EmotionJSX(\"div\", null, ___EmotionJSX(\"h2\", {\n    className: \"blog_category_header\"\n  }, category.toUpperCase() + \" POSTS\", ___EmotionJSX(\"br\", {\n    className: \"br_category\"\n  }), ___EmotionJSX(\"span\", {\n    className: \"blog_category_count\"\n  }, \"+\\xA0\", ___EmotionJSX(CountUp, {\n    duration: 4,\n    start: 0,\n    end: countPosts === null || countPosts === void 0 ? void 0 : countPosts.length\n  }), \"\\xA0posts.\")), ___EmotionJSX(\"div\", {\n    className: \"blog_category_big\"\n  }, ___EmotionJSX(ArticleRow, {\n    article: dailyPosts[0] || techPosts[0]\n  }), ___EmotionJSX(Divider, null)), ___EmotionJSX(\"div\", {\n    className: \"blog_category_medium\"\n  }, ___EmotionJSX(ArticleColumn, {\n    article: dailyPosts[0] || techPosts[0]\n  })), ___EmotionJSX(\"div\", {\n    className: \"blog_category_small\"\n  }, ___EmotionJSX(Divider, null), ___EmotionJSX(ArticleColumn, {\n    article: dailyPosts[0] || techPosts[0]\n  })), ___EmotionJSX(Row, null, (techPosts || dailyPosts).slice(1).map(function (v, i) {\n    return ___EmotionJSX(Col, {\n      key: i,\n      xs: 24,\n      sm: 12,\n      lg: 8\n    }, ___EmotionJSX(ArticleColumn, {\n      article: v\n    }));\n  }))));\n});\nexport var __N_SSP = true;\nexport default /*#__PURE__*/memo(BlogCategoryPage);","map":{"version":3,"sources":["C:/Users/Noah/Desktop/Project/Noahworld/client/pages/[category]/index.tsx"],"names":["Col","Divider","Row","React","memo","useEffect","useDispatch","useSelector","LOAD_MORE_POSTS_REQUEST","CountUp","Head","dynamic","useRouter","UserProfile","ArticleRow","ArticleColumn","BlogCategoryPage","router","category","query","dispatch","state","post","techPosts","dailyPosts","hasMorePosts","loadMorePostsLoading","countPosts","user","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","length","LastId","id","type","data","addEventListener","removeEventListener","toUpperCase","slice","map","v","i"],"mappings":"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","sourcesContent":["import { Col, Divider, Row } from \"antd\";\r\nimport React, { memo, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LOAD_CATEGORY_POSTS_REQUEST, LOAD_MORE_POSTS_REQUEST } from \"../../@reducers/post\";\r\nimport CountUp from \"react-countup\";\r\nimport { RootState } from \"../../@reducers\";\r\nimport Head from \"next/head\";\r\nimport dynamic from \"next/dynamic\";\r\nimport wrapper from \"../../@store/configureStore\";\r\nimport axios from \"axios\";\r\nimport { IStore } from \"../../types\";\r\nimport { END } from \"@redux-saga/core\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nconst UserProfile = dynamic(() => import(\"../../components/Blog/Profile/UserProfile\"));\r\nconst ArticleRow = dynamic(() => import(\"../../components/Blog/Articles/ArticleRow\"));\r\nconst ArticleColumn = dynamic(() => import(\"../../components/Blog/Articles/ArticleColumn\"));\r\n\r\nconst BlogCategoryPage = memo(() => {\r\n  const router = useRouter();\r\n  const category = router.query.category;\r\n  const dispatch = useDispatch();\r\n  const { techPosts, dailyPosts, hasMorePosts, loadMorePostsLoading, countPosts } = useSelector(\r\n    (state: RootState) => state.post\r\n  );\r\n  const { user } = useSelector((state: RootState) => state.user);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      if (\r\n        //Y축 스크롤 값과 화면에 보이는 페이지 길이\r\n        window.scrollY + document.documentElement.clientHeight >\r\n        //전체 페이지의 길이\r\n        document.documentElement.scrollHeight - 300\r\n      ) {\r\n        if (hasMorePosts && !loadMorePostsLoading && (techPosts || dailyPosts.length > 7)) {\r\n          //포스트가 더 있고 , 포스트를 로딩중이 아니고 , 포스트가 7개 초과이면 ( )\r\n          const LastId =\r\n            (techPosts || dailyPosts) &&\r\n            (techPosts || dailyPosts)[(techPosts || dailyPosts).length - 1].id;\r\n          // 이미 불러온 포스트들(배열)에 마지막값의 아이디를 가져온다.\r\n          dispatch({\r\n            type: LOAD_MORE_POSTS_REQUEST,\r\n            data: {\r\n              LastId,\r\n              category,\r\n            },\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    return () => {\r\n      //메모리릭을 방지하기위해 unmount시 removeEventListner\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, [hasMorePosts]);\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Noah world | {category}</title>\r\n      </Head>\r\n      {user && <UserProfile />}\r\n      <div>\r\n        <h2 className=\"blog_category_header\">\r\n          {(category as string).toUpperCase() + \" POSTS\"}\r\n          <br className=\"br_category\" />\r\n          <span className=\"blog_category_count\">\r\n            +&nbsp;\r\n            <CountUp duration={4} start={0} end={countPosts?.length} />\r\n            &nbsp;posts.\r\n          </span>\r\n        </h2>\r\n        <div className=\"blog_category_big\">\r\n          <ArticleRow article={dailyPosts[0] || techPosts[0]} />\r\n          <Divider />\r\n        </div>\r\n        <div className=\"blog_category_medium\">\r\n          <ArticleColumn article={dailyPosts[0] || techPosts[0]} />\r\n        </div>\r\n        <div className=\"blog_category_small\">\r\n          <Divider />\r\n          <ArticleColumn article={dailyPosts[0] || techPosts[0]} />\r\n        </div>\r\n        <Row>\r\n          {(techPosts || dailyPosts).slice(1).map((v, i) => (\r\n            <Col key={i} xs={24} sm={12} lg={8}>\r\n              <ArticleColumn article={v} />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : \"\";\r\n  axios.defaults.headers.Cookie = \"\";\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  let { category } = context.query;\r\n  if (category === \"tech\" || category === \"daily\" || category === \"culture\") {\r\n    context.store.dispatch({\r\n      type: LOAD_CATEGORY_POSTS_REQUEST,\r\n      data: category,\r\n    });\r\n  } else {\r\n    return {\r\n      redirect: {\r\n        destination: \"/404\",\r\n      },\r\n    };\r\n  }\r\n  context.store.dispatch(END);\r\n  await (context.store as IStore).sagaTask.toPromise();\r\n});\r\n\r\nexport default memo(BlogCategoryPage);\r\n"]},"metadata":{},"sourceType":"module"}