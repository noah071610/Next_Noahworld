{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Noah/Desktop/Project/Noahworld/client/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addQuiz),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(searchKeyword),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(searchHashtag),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddQuiz),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchSearchKeyword),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSearchHashtag),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(blogSaga);\n\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_QUIZ_CLEAR, ADD_QUIZ_FAILURE, ADD_QUIZ_REQUEST, ADD_QUIZ_SUCCESS, SEARCH_HASH_TAG_CLEAR, SEARCH_HASH_TAG_FAILURE, SEARCH_HASH_TAG_REQUEST, SEARCH_HASH_TAG_SUCCESS, SEARCH_KEYWORD_CLEAR, SEARCH_KEYWORD_FAILURE, SEARCH_KEYWORD_REQUEST, SEARCH_KEYWORD_SUCCESS } from \"../@reducers/blog\";\n\nfunction addQuizAPI(data) {\n  return axios.post(\"/api/quiz\", data);\n}\n\nfunction addQuiz(action) {\n  return _regeneratorRuntime.wrap(function addQuiz$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addQuizAPI, action.data);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_QUIZ_SUCCESS\n          });\n\n        case 5:\n          _context.next = 7;\n          return delay(3000);\n\n        case 7:\n          _context.next = 9;\n          return put({\n            type: ADD_QUIZ_CLEAR\n          });\n\n        case 9:\n          _context.next = 19;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 15;\n          return put({\n            type: ADD_QUIZ_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 15:\n          _context.next = 17;\n          return delay(3000);\n\n        case 17:\n          _context.next = 19;\n          return put({\n            type: ADD_QUIZ_CLEAR\n          });\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n}\n\nfunction searchKeywordAPI(data) {\n  return axios.post(\"/api/search/\", data);\n}\n\nfunction searchKeyword(action) {\n  var _yield$call, data;\n\n  return _regeneratorRuntime.wrap(function searchKeyword$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(searchKeywordAPI, action.data);\n\n        case 3:\n          _yield$call = _context2.sent;\n          data = _yield$call.data;\n          _context2.next = 7;\n          return put({\n            type: SEARCH_KEYWORD_SUCCESS,\n            data: data\n          });\n\n        case 7:\n          _context2.next = 9;\n          return delay(3000);\n\n        case 9:\n          _context2.next = 11;\n          return put({\n            type: SEARCH_KEYWORD_CLEAR\n          });\n\n        case 11:\n          _context2.next = 21;\n          break;\n\n        case 13:\n          _context2.prev = 13;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 17;\n          return put({\n            type: SEARCH_KEYWORD_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 17:\n          _context2.next = 19;\n          return delay(3000);\n\n        case 19:\n          _context2.next = 21;\n          return put({\n            type: SEARCH_KEYWORD_CLEAR\n          });\n\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 13]]);\n}\n\nfunction searchHashtagAPI(data) {\n  return axios.post(\"/api/search/hashtag\", data);\n}\n\nfunction searchHashtag(action) {\n  var _yield$call2, data;\n\n  return _regeneratorRuntime.wrap(function searchHashtag$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(searchHashtagAPI, action.data);\n\n        case 3:\n          _yield$call2 = _context3.sent;\n          data = _yield$call2.data;\n          _context3.next = 7;\n          return put({\n            type: SEARCH_HASH_TAG_SUCCESS,\n            data: data\n          });\n\n        case 7:\n          _context3.next = 9;\n          return delay(3000);\n\n        case 9:\n          _context3.next = 11;\n          return put({\n            type: SEARCH_HASH_TAG_CLEAR\n          });\n\n        case 11:\n          _context3.next = 21;\n          break;\n\n        case 13:\n          _context3.prev = 13;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 17;\n          return put({\n            type: SEARCH_HASH_TAG_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 17:\n          _context3.next = 19;\n          return delay(3000);\n\n        case 19:\n          _context3.next = 21;\n          return put({\n            type: SEARCH_HASH_TAG_CLEAR\n          });\n\n        case 21:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 13]]);\n}\n\nfunction watchAddQuiz() {\n  return _regeneratorRuntime.wrap(function watchAddQuiz$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_QUIZ_REQUEST, addQuiz);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchSearchKeyword() {\n  return _regeneratorRuntime.wrap(function watchSearchKeyword$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(SEARCH_KEYWORD_REQUEST, searchKeyword);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSearchHashtag() {\n  return _regeneratorRuntime.wrap(function watchSearchHashtag$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SEARCH_HASH_TAG_REQUEST, searchHashtag);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function blogSaga() {\n  return _regeneratorRuntime.wrap(function blogSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddQuiz), fork(watchSearchKeyword), fork(watchSearchHashtag)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/Noah/Desktop/Project/Noahworld/client/@saga/blog.ts"],"names":["addQuiz","searchKeyword","searchHashtag","watchAddQuiz","watchSearchKeyword","watchSearchHashtag","blogSaga","all","call","delay","fork","put","takeLatest","axios","ADD_QUIZ_CLEAR","ADD_QUIZ_FAILURE","ADD_QUIZ_REQUEST","ADD_QUIZ_SUCCESS","SEARCH_HASH_TAG_CLEAR","SEARCH_HASH_TAG_FAILURE","SEARCH_HASH_TAG_REQUEST","SEARCH_HASH_TAG_SUCCESS","SEARCH_KEYWORD_CLEAR","SEARCH_KEYWORD_FAILURE","SEARCH_KEYWORD_REQUEST","SEARCH_KEYWORD_SUCCESS","addQuizAPI","data","post","action","type","error","response","searchKeywordAPI","searchHashtagAPI"],"mappings":"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","sourcesContent":["import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_QUIZ_CLEAR,\r\n  ADD_QUIZ_FAILURE,\r\n  ADD_QUIZ_REQUEST,\r\n  ADD_QUIZ_SUCCESS,\r\n  SEARCH_HASH_TAG_CLEAR,\r\n  SEARCH_HASH_TAG_FAILURE,\r\n  SEARCH_HASH_TAG_REQUEST,\r\n  SEARCH_HASH_TAG_SUCCESS,\r\n  SEARCH_KEYWORD_CLEAR,\r\n  SEARCH_KEYWORD_FAILURE,\r\n  SEARCH_KEYWORD_REQUEST,\r\n  SEARCH_KEYWORD_SUCCESS,\r\n} from \"../@reducers/blog\";\r\nimport {\r\n  AddQuizData,\r\n  AddQuizInter,\r\n  SearchHashtagData,\r\n  SearchHashtagInter,\r\n  SearchKeywordData,\r\n  SearchKeywordInter,\r\n} from \"./@sagaTypes\";\r\n\r\nfunction addQuizAPI(data: AddQuizData) {\r\n  return axios.post(`/api/quiz`, data);\r\n}\r\n\r\nfunction* addQuiz(action: AddQuizInter) {\r\n  try {\r\n    yield call(addQuizAPI, action.data);\r\n    yield put({\r\n      type: ADD_QUIZ_SUCCESS,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: ADD_QUIZ_CLEAR,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_QUIZ_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: ADD_QUIZ_CLEAR,\r\n    });\r\n  }\r\n}\r\n\r\nfunction searchKeywordAPI(data: SearchKeywordData) {\r\n  return axios.post(`/api/search/`, data);\r\n}\r\n\r\nfunction* searchKeyword(action: SearchKeywordInter) {\r\n  try {\r\n    const { data } = yield call(searchKeywordAPI, action.data);\r\n    yield put({\r\n      type: SEARCH_KEYWORD_SUCCESS,\r\n      data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: SEARCH_KEYWORD_CLEAR,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SEARCH_KEYWORD_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: SEARCH_KEYWORD_CLEAR,\r\n    });\r\n  }\r\n}\r\n\r\nfunction searchHashtagAPI(data: SearchHashtagData) {\r\n  return axios.post(`/api/search/hashtag`, data);\r\n}\r\n\r\nfunction* searchHashtag(action: SearchHashtagInter) {\r\n  try {\r\n    const { data } = yield call(searchHashtagAPI, action.data);\r\n\r\n    yield put({\r\n      type: SEARCH_HASH_TAG_SUCCESS,\r\n      data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: SEARCH_HASH_TAG_CLEAR,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SEARCH_HASH_TAG_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n    yield delay(3000);\r\n    yield put({\r\n      type: SEARCH_HASH_TAG_CLEAR,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddQuiz() {\r\n  yield takeLatest(ADD_QUIZ_REQUEST, addQuiz);\r\n}\r\nfunction* watchSearchKeyword() {\r\n  yield takeLatest(SEARCH_KEYWORD_REQUEST, searchKeyword);\r\n}\r\nfunction* watchSearchHashtag() {\r\n  yield takeLatest(SEARCH_HASH_TAG_REQUEST, searchHashtag);\r\n}\r\n\r\nexport default function* blogSaga() {\r\n  yield all([fork(watchAddQuiz), fork(watchSearchKeyword), fork(watchSearchHashtag)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}