exports.ids = [4];
exports.modules = {

/***/ "./components/Portfolio/Decorator/CardContent.tsx":
/*!********************************************************!*\
  !*** ./components/Portfolio/Decorator/CardContent.tsx ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../config */ "./config.js");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_3__);

var _jsxFileName = "C:\\Users\\Noah\\Desktop\\Project\\Noahworld\\client\\components\\Portfolio\\Decorator\\CardContent.tsx";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }





const Square = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
  target: "e10zwa954",
  label: "Square"
})(false ? undefined : {
  name: "t3jzj2",
  styles: "width:120px;position:relative;transition:0.5s;margin:1.5rem auto;&:hover{transform:translateY(-10px);}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTm9haFxcRGVza3RvcFxcUHJvamVjdFxcTm9haHdvcmxkXFxjbGllbnRcXGNvbXBvbmVudHNcXFBvcnRmb2xpb1xcRGVjb3JhdG9yXFxDYXJkQ29udGVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSXlCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcTm9haFxcRGVza3RvcFxcUHJvamVjdFxcTm9haHdvcmxkXFxjbGllbnRcXGNvbXBvbmVudHNcXFBvcnRmb2xpb1xcRGVjb3JhdG9yXFxDYXJkQ29udGVudC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcclxuaW1wb3J0IFJlYWN0LCB7IEZDIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IE1BSU5fQ09MT1IgfSBmcm9tIFwiLi4vLi4vLi4vY29uZmlnXCI7XHJcblxyXG5jb25zdCBTcXVhcmUgPSBzdHlsZWQuZGl2YFxyXG4gIHdpZHRoOiAxMjBweDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgdHJhbnNpdGlvbjogMC41cztcclxuICBtYXJnaW46IDEuNXJlbSBhdXRvO1xyXG4gICY6aG92ZXIge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMHB4KTtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBWYWx1ZVNoYXBlID0gc3R5bGVkLmRpdmBcclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogNDAlO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEltZyA9IHN0eWxlZC5kaXZgXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHRyYW5zaXRpb246IDAuNXM7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtNQUlOX0NPTE9SfTtcclxuICB0cmFuc2Zvcm06IHNrZXdZKC0xMGRlZyk7XHJcbiAgJjpiZWZvcmUge1xyXG4gICAgY29udGVudDogXCJcIjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogLTEwcHg7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzNmZmUxO1xyXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tO1xyXG4gICAgdHJhbnNmb3JtOiBza2V3WCg0NWRlZyk7XHJcbiAgICB0cmFuc2l0aW9uOiAwLjVzO1xyXG4gIH1cclxuICAmOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IC0xMHB4O1xyXG4gICAgbGVmdDogLTEwcHg7XHJcbiAgICB3aWR0aDogMTBweDtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjM2ZmZTE7XHJcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0O1xyXG4gICAgdHJhbnNmb3JtOiBza2V3WSg0NWRlZyk7XHJcbiAgICB0cmFuc2l0aW9uOiAwLjVzO1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMjBweCBzb2xpZCAjZDlkOWQ5O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFNxdXJlVGl0bGUgPSBzdHlsZWQuaDRgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgY29sb3I6IGJsYWNrO1xyXG4gICY6YmVmb3JlIHtcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEzMHB4O1xyXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRyYW5zcGFyZW50LCB0cmFuc3BhcmVudCwgcmdiYSgwLCAwLCAwLCAwLjEpKTtcclxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbTtcclxuICAgIHRyYW5zZm9ybTogc2tld1goNDVkZWcpO1xyXG4gICAgdHJhbnNpdGlvbjogMC41cztcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke1NxdWFyZX06aG92ZXIgJjpiZWZvcmUge1xyXG4gICAgdHJhbnNmb3JtOiBza2V3WCg0NWRlZykgdHJhbnNsYXRlWSgxMHB4KTtcclxuICAgIGZpbHRlcjogYmx1cig1cHgpO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFZhbHVlQ29udGVudCA9IHN0eWxlZC5kaXZgXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDYwJTtcclxuICAgIHBhZGRpbmc6IDFyZW0gMCAwIDFyZW07XHJcbiAgICB0ZXh0LWFsaWduOiBzdGFydDtcclxuICAgIHAge1xyXG4gICAgICBtYXJnaW46IDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIHAge1xyXG4gICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG5pbnRlcmZhY2UgQ29udGVudHMge1xyXG4gIHNxdWFyZVRpdGxlOiBzdHJpbmc7XHJcbiAgc3JjOiBzdHJpbmc7XHJcbiAgdGl0bGU6IHN0cmluZztcclxuICBkZXNjOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBDb250ZW50VHlwZSB7XHJcbiAgY29udGVudHM6IENvbnRlbnRzO1xyXG4gIGRlbGF5OiBudW1iZXI7XHJcbn1cclxuXHJcbmNvbnN0IENhcmRDb250ZW50OiBGQzxDb250ZW50VHlwZT4gPSAoeyBkZWxheSwgY29udGVudHMgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8VmFsdWVTaGFwZSBkYXRhLWFvcz1cImZsaXAtdXBcIiBkYXRhLWFvcy1kdXJhdGlvbj1cIjUwMFwiIGRhdGEtYW9zLWRlbGF5PXtkZWxheX0+XHJcbiAgICAgICAgPFNxdWFyZT5cclxuICAgICAgICAgIDxJbWc+XHJcbiAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICBhbHQ9e2NvbnRlbnRzLnNxdWFyZVRpdGxlfVxyXG4gICAgICAgICAgICAgIHNyYz17Y29udGVudHMuc3JjfVxyXG4gICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IFwiMXJlbSAwXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCI2MHB4XCIsXHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPFNxdXJlVGl0bGU+e2NvbnRlbnRzLnNxdWFyZVRpdGxlfTwvU3F1cmVUaXRsZT5cclxuICAgICAgICAgIDwvSW1nPlxyXG4gICAgICAgIDwvU3F1YXJlPlxyXG4gICAgICA8L1ZhbHVlU2hhcGU+XHJcbiAgICAgIDxWYWx1ZUNvbnRlbnQ+XHJcbiAgICAgICAgPGg0IHN0eWxlPXt7IG1hcmdpblRvcDogXCIxcmVtXCIsIGZvbnRXZWlnaHQ6IFwiYm9sZFwiIH19Pntjb250ZW50cy50aXRsZX08L2g0PlxyXG4gICAgICAgIDxwIHN0eWxlPXt7IHdpZHRoOiBcIjEwMCVcIiwgbGluZUhlaWdodDogXCIxLjVcIiwgZm9udFNpemU6IFwiMC44cmVtXCIsIG1hcmdpbjogXCIxcmVtIGF1dG9cIiB9fT5cclxuICAgICAgICAgIHtjb250ZW50cy5kZXNjfVxyXG4gICAgICAgIDwvcD5cclxuICAgICAgPC9WYWx1ZUNvbnRlbnQ+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2FyZENvbnRlbnQ7XHJcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const ValueShape = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
  target: "e10zwa953",
  label: "ValueShape"
})(false ? undefined : {
  name: "dwskes",
  styles: "@media only screen and (max-width: 768px){width:40%;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTm9haFxcRGVza3RvcFxcUHJvamVjdFxcTm9haHdvcmxkXFxjbGllbnRcXGNvbXBvbmVudHNcXFBvcnRmb2xpb1xcRGVjb3JhdG9yXFxDYXJkQ29udGVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBYzZCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcTm9haFxcRGVza3RvcFxcUHJvamVjdFxcTm9haHdvcmxkXFxjbGllbnRcXGNvbXBvbmVudHNcXFBvcnRmb2xpb1xcRGVjb3JhdG9yXFxDYXJkQ29udGVudC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcclxuaW1wb3J0IFJlYWN0LCB7IEZDIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IE1BSU5fQ09MT1IgfSBmcm9tIFwiLi4vLi4vLi4vY29uZmlnXCI7XHJcblxyXG5jb25zdCBTcXVhcmUgPSBzdHlsZWQuZGl2YFxyXG4gIHdpZHRoOiAxMjBweDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgdHJhbnNpdGlvbjogMC41cztcclxuICBtYXJnaW46IDEuNXJlbSBhdXRvO1xyXG4gICY6aG92ZXIge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMHB4KTtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBWYWx1ZVNoYXBlID0gc3R5bGVkLmRpdmBcclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogNDAlO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEltZyA9IHN0eWxlZC5kaXZgXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHRyYW5zaXRpb246IDAuNXM7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtNQUlOX0NPTE9SfTtcclxuICB0cmFuc2Zvcm06IHNrZXdZKC0xMGRlZyk7XHJcbiAgJjpiZWZvcmUge1xyXG4gICAgY29udGVudDogXCJcIjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogLTEwcHg7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzNmZmUxO1xyXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tO1xyXG4gICAgdHJhbnNmb3JtOiBza2V3WCg0NWRlZyk7XHJcbiAgICB0cmFuc2l0aW9uOiAwLjVzO1xyXG4gIH1cclxuICAmOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IC0xMHB4O1xyXG4gICAgbGVmdDogLTEwcHg7XHJcbiAgICB3aWR0aDogMTBweDtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjM2ZmZTE7XHJcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0O1xyXG4gICAgdHJhbnNmb3JtOiBza2V3WSg0NWRlZyk7XHJcbiAgICB0cmFuc2l0aW9uOiAwLjVzO1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMjBweCBzb2xpZCAjZDlkOWQ5O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFNxdXJlVGl0bGUgPSBzdHlsZWQuaDRgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgY29sb3I6IGJsYWNrO1xyXG4gICY6YmVmb3JlIHtcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEzMHB4O1xyXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRyYW5zcGFyZW50LCB0cmFuc3BhcmVudCwgcmdiYSgwLCAwLCAwLCAwLjEpKTtcclxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbTtcclxuICAgIHRyYW5zZm9ybTogc2tld1goNDVkZWcpO1xyXG4gICAgdHJhbnNpdGlvbjogMC41cztcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke1NxdWFyZX06aG92ZXIgJjpiZWZvcmUge1xyXG4gICAgdHJhbnNmb3JtOiBza2V3WCg0NWRlZykgdHJhbnNsYXRlWSgxMHB4KTtcclxuICAgIGZpbHRlcjogYmx1cig1cHgpO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFZhbHVlQ29udGVudCA9IHN0eWxlZC5kaXZgXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDYwJTtcclxuICAgIHBhZGRpbmc6IDFyZW0gMCAwIDFyZW07XHJcbiAgICB0ZXh0LWFsaWduOiBzdGFydDtcclxuICAgIHAge1xyXG4gICAgICBtYXJnaW46IDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIHAge1xyXG4gICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG5pbnRlcmZhY2UgQ29udGVudHMge1xyXG4gIHNxdWFyZVRpdGxlOiBzdHJpbmc7XHJcbiAgc3JjOiBzdHJpbmc7XHJcbiAgdGl0bGU6IHN0cmluZztcclxuICBkZXNjOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBDb250ZW50VHlwZSB7XHJcbiAgY29udGVudHM6IENvbnRlbnRzO1xyXG4gIGRlbGF5OiBudW1iZXI7XHJcbn1cclxuXHJcbmNvbnN0IENhcmRDb250ZW50OiBGQzxDb250ZW50VHlwZT4gPSAoeyBkZWxheSwgY29udGVudHMgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8VmFsdWVTaGFwZSBkYXRhLWFvcz1cImZsaXAtdXBcIiBkYXRhLWFvcy1kdXJhdGlvbj1cIjUwMFwiIGRhdGEtYW9zLWRlbGF5PXtkZWxheX0+XHJcbiAgICAgICAgPFNxdWFyZT5cclxuICAgICAgICAgIDxJbWc+XHJcbiAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICBhbHQ9e2NvbnRlbnRzLnNxdWFyZVRpdGxlfVxyXG4gICAgICAgICAgICAgIHNyYz17Y29udGVudHMuc3JjfVxyXG4gICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IFwiMXJlbSAwXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCI2MHB4XCIsXHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPFNxdXJlVGl0bGU+e2NvbnRlbnRzLnNxdWFyZVRpdGxlfTwvU3F1cmVUaXRsZT5cclxuICAgICAgICAgIDwvSW1nPlxyXG4gICAgICAgIDwvU3F1YXJlPlxyXG4gICAgICA8L1ZhbHVlU2hhcGU+XHJcbiAgICAgIDxWYWx1ZUNvbnRlbnQ+XHJcbiAgICAgICAgPGg0IHN0eWxlPXt7IG1hcmdpblRvcDogXCIxcmVtXCIsIGZvbnRXZWlnaHQ6IFwiYm9sZFwiIH19Pntjb250ZW50cy50aXRsZX08L2g0PlxyXG4gICAgICAgIDxwIHN0eWxlPXt7IHdpZHRoOiBcIjEwMCVcIiwgbGluZUhlaWdodDogXCIxLjVcIiwgZm9udFNpemU6IFwiMC44cmVtXCIsIG1hcmdpbjogXCIxcmVtIGF1dG9cIiB9fT5cclxuICAgICAgICAgIHtjb250ZW50cy5kZXNjfVxyXG4gICAgICAgIDwvcD5cclxuICAgICAgPC9WYWx1ZUNvbnRlbnQ+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2FyZENvbnRlbnQ7XHJcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const Img = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
  target: "e10zwa952",
  label: "Img"
})("width:100%;position:relative;transition:0.5s;background-color:", _config__WEBPACK_IMPORTED_MODULE_2__["MAIN_COLOR"], ";transform:skewY(-10deg);&:before{content:\"\";position:absolute;top:-10px;left:0;width:100%;height:10px;background-color:#c3ffe1;transform-origin:bottom;transform:skewX(45deg);transition:0.5s;}&:after{content:\"\";position:absolute;top:-10px;left:-10px;width:10px;height:100%;background-color:#c3ffe1;transform-origin:left;transform:skewY(45deg);transition:0.5s;border-bottom:20px solid #d9d9d9;}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTm9haFxcRGVza3RvcFxcUHJvamVjdFxcTm9haHdvcmxkXFxjbGllbnRcXGNvbXBvbmVudHNcXFBvcnRmb2xpb1xcRGVjb3JhdG9yXFxDYXJkQ29udGVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0JzQiIsImZpbGUiOiJDOlxcVXNlcnNcXE5vYWhcXERlc2t0b3BcXFByb2plY3RcXE5vYWh3b3JsZFxcY2xpZW50XFxjb21wb25lbnRzXFxQb3J0Zm9saW9cXERlY29yYXRvclxcQ2FyZENvbnRlbnQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XHJcbmltcG9ydCBSZWFjdCwgeyBGQyB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBNQUlOX0NPTE9SIH0gZnJvbSBcIi4uLy4uLy4uL2NvbmZpZ1wiO1xyXG5cclxuY29uc3QgU3F1YXJlID0gc3R5bGVkLmRpdmBcclxuICB3aWR0aDogMTIwcHg7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHRyYW5zaXRpb246IDAuNXM7XHJcbiAgbWFyZ2luOiAxLjVyZW0gYXV0bztcclxuICAmOmhvdmVyIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTBweCk7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgVmFsdWVTaGFwZSA9IHN0eWxlZC5kaXZgXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDQwJTtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBJbWcgPSBzdHlsZWQuZGl2YFxyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB0cmFuc2l0aW9uOiAwLjVzO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7TUFJTl9DT0xPUn07XHJcbiAgdHJhbnNmb3JtOiBza2V3WSgtMTBkZWcpO1xyXG4gICY6YmVmb3JlIHtcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IC0xMHB4O1xyXG4gICAgbGVmdDogMDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2MzZmZlMTtcclxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbTtcclxuICAgIHRyYW5zZm9ybTogc2tld1goNDVkZWcpO1xyXG4gICAgdHJhbnNpdGlvbjogMC41cztcclxuICB9XHJcbiAgJjphZnRlciB7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAtMTBweDtcclxuICAgIGxlZnQ6IC0xMHB4O1xyXG4gICAgd2lkdGg6IDEwcHg7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzNmZmUxO1xyXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdDtcclxuICAgIHRyYW5zZm9ybTogc2tld1koNDVkZWcpO1xyXG4gICAgdHJhbnNpdGlvbjogMC41cztcclxuICAgIGJvcmRlci1ib3R0b206IDIwcHggc29saWQgI2Q5ZDlkOTtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBTcXVyZVRpdGxlID0gc3R5bGVkLmg0YFxyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gIHVzZXItc2VsZWN0OiBub25lO1xyXG4gIGNvbG9yOiBibGFjaztcclxuICAmOmJlZm9yZSB7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMzBweDtcclxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0cmFuc3BhcmVudCwgdHJhbnNwYXJlbnQsIHJnYmEoMCwgMCwgMCwgMC4xKSk7XHJcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b207XHJcbiAgICB0cmFuc2Zvcm06IHNrZXdYKDQ1ZGVnKTtcclxuICAgIHRyYW5zaXRpb246IDAuNXM7XHJcbiAgICB6LWluZGV4OiAtMTtcclxuICB9XHJcbiAgJHtTcXVhcmV9OmhvdmVyICY6YmVmb3JlIHtcclxuICAgIHRyYW5zZm9ybTogc2tld1goNDVkZWcpIHRyYW5zbGF0ZVkoMTBweCk7XHJcbiAgICBmaWx0ZXI6IGJsdXIoNXB4KTtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBWYWx1ZUNvbnRlbnQgPSBzdHlsZWQuZGl2YFxyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA2MCU7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDAgMCAxcmVtO1xyXG4gICAgdGV4dC1hbGlnbjogc3RhcnQ7XHJcbiAgICBwIHtcclxuICAgICAgbWFyZ2luOiAwO1xyXG4gICAgfVxyXG4gIH1cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBwIHtcclxuICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuaW50ZXJmYWNlIENvbnRlbnRzIHtcclxuICBzcXVhcmVUaXRsZTogc3RyaW5nO1xyXG4gIHNyYzogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgZGVzYzogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQ29udGVudFR5cGUge1xyXG4gIGNvbnRlbnRzOiBDb250ZW50cztcclxuICBkZWxheTogbnVtYmVyO1xyXG59XHJcblxyXG5jb25zdCBDYXJkQ29udGVudDogRkM8Q29udGVudFR5cGU+ID0gKHsgZGVsYXksIGNvbnRlbnRzIH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPFZhbHVlU2hhcGUgZGF0YS1hb3M9XCJmbGlwLXVwXCIgZGF0YS1hb3MtZHVyYXRpb249XCI1MDBcIiBkYXRhLWFvcy1kZWxheT17ZGVsYXl9PlxyXG4gICAgICAgIDxTcXVhcmU+XHJcbiAgICAgICAgICA8SW1nPlxyXG4gICAgICAgICAgICA8aW1nXHJcbiAgICAgICAgICAgICAgYWx0PXtjb250ZW50cy5zcXVhcmVUaXRsZX1cclxuICAgICAgICAgICAgICBzcmM9e2NvbnRlbnRzLnNyY31cclxuICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiBcIjFyZW0gMFwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiNjBweFwiLFxyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxTcXVyZVRpdGxlPntjb250ZW50cy5zcXVhcmVUaXRsZX08L1NxdXJlVGl0bGU+XHJcbiAgICAgICAgICA8L0ltZz5cclxuICAgICAgICA8L1NxdWFyZT5cclxuICAgICAgPC9WYWx1ZVNoYXBlPlxyXG4gICAgICA8VmFsdWVDb250ZW50PlxyXG4gICAgICAgIDxoNCBzdHlsZT17eyBtYXJnaW5Ub3A6IFwiMXJlbVwiLCBmb250V2VpZ2h0OiBcImJvbGRcIiB9fT57Y29udGVudHMudGl0bGV9PC9oND5cclxuICAgICAgICA8cCBzdHlsZT17eyB3aWR0aDogXCIxMDAlXCIsIGxpbmVIZWlnaHQ6IFwiMS41XCIsIGZvbnRTaXplOiBcIjAuOHJlbVwiLCBtYXJnaW46IFwiMXJlbSBhdXRvXCIgfX0+XHJcbiAgICAgICAgICB7Y29udGVudHMuZGVzY31cclxuICAgICAgICA8L3A+XHJcbiAgICAgIDwvVmFsdWVDb250ZW50PlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENhcmRDb250ZW50O1xyXG4iXX0= */"));

const SqureTitle = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("h4", false ? undefined : {
  target: "e10zwa951",
  label: "SqureTitle"
})("background-color:white;user-select:none;color:black;&:before{content:\"\";position:absolute;left:0;bottom:0;width:100%;height:130px;background:linear-gradient(transparent, transparent, rgba(0, 0, 0, 0.1));transform-origin:bottom;transform:skewX(45deg);transition:0.5s;z-index:-1;}", Square, ":hover &:before{transform:skewX(45deg) translateY(10px);filter:blur(5px);}" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTm9haFxcRGVza3RvcFxcUHJvamVjdFxcTm9haHdvcmxkXFxjbGllbnRcXGNvbXBvbmVudHNcXFBvcnRmb2xpb1xcRGVjb3JhdG9yXFxDYXJkQ29udGVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUQ0QiIsImZpbGUiOiJDOlxcVXNlcnNcXE5vYWhcXERlc2t0b3BcXFByb2plY3RcXE5vYWh3b3JsZFxcY2xpZW50XFxjb21wb25lbnRzXFxQb3J0Zm9saW9cXERlY29yYXRvclxcQ2FyZENvbnRlbnQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XHJcbmltcG9ydCBSZWFjdCwgeyBGQyB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBNQUlOX0NPTE9SIH0gZnJvbSBcIi4uLy4uLy4uL2NvbmZpZ1wiO1xyXG5cclxuY29uc3QgU3F1YXJlID0gc3R5bGVkLmRpdmBcclxuICB3aWR0aDogMTIwcHg7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHRyYW5zaXRpb246IDAuNXM7XHJcbiAgbWFyZ2luOiAxLjVyZW0gYXV0bztcclxuICAmOmhvdmVyIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTBweCk7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgVmFsdWVTaGFwZSA9IHN0eWxlZC5kaXZgXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDQwJTtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBJbWcgPSBzdHlsZWQuZGl2YFxyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB0cmFuc2l0aW9uOiAwLjVzO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7TUFJTl9DT0xPUn07XHJcbiAgdHJhbnNmb3JtOiBza2V3WSgtMTBkZWcpO1xyXG4gICY6YmVmb3JlIHtcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IC0xMHB4O1xyXG4gICAgbGVmdDogMDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2MzZmZlMTtcclxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbTtcclxuICAgIHRyYW5zZm9ybTogc2tld1goNDVkZWcpO1xyXG4gICAgdHJhbnNpdGlvbjogMC41cztcclxuICB9XHJcbiAgJjphZnRlciB7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAtMTBweDtcclxuICAgIGxlZnQ6IC0xMHB4O1xyXG4gICAgd2lkdGg6IDEwcHg7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzNmZmUxO1xyXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdDtcclxuICAgIHRyYW5zZm9ybTogc2tld1koNDVkZWcpO1xyXG4gICAgdHJhbnNpdGlvbjogMC41cztcclxuICAgIGJvcmRlci1ib3R0b206IDIwcHggc29saWQgI2Q5ZDlkOTtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBTcXVyZVRpdGxlID0gc3R5bGVkLmg0YFxyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gIHVzZXItc2VsZWN0OiBub25lO1xyXG4gIGNvbG9yOiBibGFjaztcclxuICAmOmJlZm9yZSB7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMzBweDtcclxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0cmFuc3BhcmVudCwgdHJhbnNwYXJlbnQsIHJnYmEoMCwgMCwgMCwgMC4xKSk7XHJcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b207XHJcbiAgICB0cmFuc2Zvcm06IHNrZXdYKDQ1ZGVnKTtcclxuICAgIHRyYW5zaXRpb246IDAuNXM7XHJcbiAgICB6LWluZGV4OiAtMTtcclxuICB9XHJcbiAgJHtTcXVhcmV9OmhvdmVyICY6YmVmb3JlIHtcclxuICAgIHRyYW5zZm9ybTogc2tld1goNDVkZWcpIHRyYW5zbGF0ZVkoMTBweCk7XHJcbiAgICBmaWx0ZXI6IGJsdXIoNXB4KTtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBWYWx1ZUNvbnRlbnQgPSBzdHlsZWQuZGl2YFxyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA2MCU7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDAgMCAxcmVtO1xyXG4gICAgdGV4dC1hbGlnbjogc3RhcnQ7XHJcbiAgICBwIHtcclxuICAgICAgbWFyZ2luOiAwO1xyXG4gICAgfVxyXG4gIH1cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBwIHtcclxuICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuaW50ZXJmYWNlIENvbnRlbnRzIHtcclxuICBzcXVhcmVUaXRsZTogc3RyaW5nO1xyXG4gIHNyYzogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgZGVzYzogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQ29udGVudFR5cGUge1xyXG4gIGNvbnRlbnRzOiBDb250ZW50cztcclxuICBkZWxheTogbnVtYmVyO1xyXG59XHJcblxyXG5jb25zdCBDYXJkQ29udGVudDogRkM8Q29udGVudFR5cGU+ID0gKHsgZGVsYXksIGNvbnRlbnRzIH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPFZhbHVlU2hhcGUgZGF0YS1hb3M9XCJmbGlwLXVwXCIgZGF0YS1hb3MtZHVyYXRpb249XCI1MDBcIiBkYXRhLWFvcy1kZWxheT17ZGVsYXl9PlxyXG4gICAgICAgIDxTcXVhcmU+XHJcbiAgICAgICAgICA8SW1nPlxyXG4gICAgICAgICAgICA8aW1nXHJcbiAgICAgICAgICAgICAgYWx0PXtjb250ZW50cy5zcXVhcmVUaXRsZX1cclxuICAgICAgICAgICAgICBzcmM9e2NvbnRlbnRzLnNyY31cclxuICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiBcIjFyZW0gMFwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiNjBweFwiLFxyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxTcXVyZVRpdGxlPntjb250ZW50cy5zcXVhcmVUaXRsZX08L1NxdXJlVGl0bGU+XHJcbiAgICAgICAgICA8L0ltZz5cclxuICAgICAgICA8L1NxdWFyZT5cclxuICAgICAgPC9WYWx1ZVNoYXBlPlxyXG4gICAgICA8VmFsdWVDb250ZW50PlxyXG4gICAgICAgIDxoNCBzdHlsZT17eyBtYXJnaW5Ub3A6IFwiMXJlbVwiLCBmb250V2VpZ2h0OiBcImJvbGRcIiB9fT57Y29udGVudHMudGl0bGV9PC9oND5cclxuICAgICAgICA8cCBzdHlsZT17eyB3aWR0aDogXCIxMDAlXCIsIGxpbmVIZWlnaHQ6IFwiMS41XCIsIGZvbnRTaXplOiBcIjAuOHJlbVwiLCBtYXJnaW46IFwiMXJlbSBhdXRvXCIgfX0+XHJcbiAgICAgICAgICB7Y29udGVudHMuZGVzY31cclxuICAgICAgICA8L3A+XHJcbiAgICAgIDwvVmFsdWVDb250ZW50PlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENhcmRDb250ZW50O1xyXG4iXX0= */"));

const ValueContent = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
  target: "e10zwa950",
  label: "ValueContent"
})(false ? undefined : {
  name: "1icle3i",
  styles: "width:100%;@media only screen and (max-width: 768px){width:60%;padding:1rem 0 0 1rem;text-align:start;p{margin:0;}}@media only screen and (max-width: 600px){width:100%;text-align:center;padding:0;p{margin:0 auto;}}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTm9haFxcRGVza3RvcFxcUHJvamVjdFxcTm9haHdvcmxkXFxjbGllbnRcXGNvbXBvbmVudHNcXFBvcnRmb2xpb1xcRGVjb3JhdG9yXFxDYXJkQ29udGVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEUrQiIsImZpbGUiOiJDOlxcVXNlcnNcXE5vYWhcXERlc2t0b3BcXFByb2plY3RcXE5vYWh3b3JsZFxcY2xpZW50XFxjb21wb25lbnRzXFxQb3J0Zm9saW9cXERlY29yYXRvclxcQ2FyZENvbnRlbnQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XHJcbmltcG9ydCBSZWFjdCwgeyBGQyB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBNQUlOX0NPTE9SIH0gZnJvbSBcIi4uLy4uLy4uL2NvbmZpZ1wiO1xyXG5cclxuY29uc3QgU3F1YXJlID0gc3R5bGVkLmRpdmBcclxuICB3aWR0aDogMTIwcHg7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHRyYW5zaXRpb246IDAuNXM7XHJcbiAgbWFyZ2luOiAxLjVyZW0gYXV0bztcclxuICAmOmhvdmVyIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTBweCk7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgVmFsdWVTaGFwZSA9IHN0eWxlZC5kaXZgXHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDQwJTtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBJbWcgPSBzdHlsZWQuZGl2YFxyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB0cmFuc2l0aW9uOiAwLjVzO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7TUFJTl9DT0xPUn07XHJcbiAgdHJhbnNmb3JtOiBza2V3WSgtMTBkZWcpO1xyXG4gICY6YmVmb3JlIHtcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IC0xMHB4O1xyXG4gICAgbGVmdDogMDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2MzZmZlMTtcclxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbTtcclxuICAgIHRyYW5zZm9ybTogc2tld1goNDVkZWcpO1xyXG4gICAgdHJhbnNpdGlvbjogMC41cztcclxuICB9XHJcbiAgJjphZnRlciB7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAtMTBweDtcclxuICAgIGxlZnQ6IC0xMHB4O1xyXG4gICAgd2lkdGg6IDEwcHg7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzNmZmUxO1xyXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdDtcclxuICAgIHRyYW5zZm9ybTogc2tld1koNDVkZWcpO1xyXG4gICAgdHJhbnNpdGlvbjogMC41cztcclxuICAgIGJvcmRlci1ib3R0b206IDIwcHggc29saWQgI2Q5ZDlkOTtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBTcXVyZVRpdGxlID0gc3R5bGVkLmg0YFxyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gIHVzZXItc2VsZWN0OiBub25lO1xyXG4gIGNvbG9yOiBibGFjaztcclxuICAmOmJlZm9yZSB7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMzBweDtcclxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0cmFuc3BhcmVudCwgdHJhbnNwYXJlbnQsIHJnYmEoMCwgMCwgMCwgMC4xKSk7XHJcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b207XHJcbiAgICB0cmFuc2Zvcm06IHNrZXdYKDQ1ZGVnKTtcclxuICAgIHRyYW5zaXRpb246IDAuNXM7XHJcbiAgICB6LWluZGV4OiAtMTtcclxuICB9XHJcbiAgJHtTcXVhcmV9OmhvdmVyICY6YmVmb3JlIHtcclxuICAgIHRyYW5zZm9ybTogc2tld1goNDVkZWcpIHRyYW5zbGF0ZVkoMTBweCk7XHJcbiAgICBmaWx0ZXI6IGJsdXIoNXB4KTtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBWYWx1ZUNvbnRlbnQgPSBzdHlsZWQuZGl2YFxyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA2MCU7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDAgMCAxcmVtO1xyXG4gICAgdGV4dC1hbGlnbjogc3RhcnQ7XHJcbiAgICBwIHtcclxuICAgICAgbWFyZ2luOiAwO1xyXG4gICAgfVxyXG4gIH1cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBwIHtcclxuICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuaW50ZXJmYWNlIENvbnRlbnRzIHtcclxuICBzcXVhcmVUaXRsZTogc3RyaW5nO1xyXG4gIHNyYzogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgZGVzYzogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQ29udGVudFR5cGUge1xyXG4gIGNvbnRlbnRzOiBDb250ZW50cztcclxuICBkZWxheTogbnVtYmVyO1xyXG59XHJcblxyXG5jb25zdCBDYXJkQ29udGVudDogRkM8Q29udGVudFR5cGU+ID0gKHsgZGVsYXksIGNvbnRlbnRzIH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPFZhbHVlU2hhcGUgZGF0YS1hb3M9XCJmbGlwLXVwXCIgZGF0YS1hb3MtZHVyYXRpb249XCI1MDBcIiBkYXRhLWFvcy1kZWxheT17ZGVsYXl9PlxyXG4gICAgICAgIDxTcXVhcmU+XHJcbiAgICAgICAgICA8SW1nPlxyXG4gICAgICAgICAgICA8aW1nXHJcbiAgICAgICAgICAgICAgYWx0PXtjb250ZW50cy5zcXVhcmVUaXRsZX1cclxuICAgICAgICAgICAgICBzcmM9e2NvbnRlbnRzLnNyY31cclxuICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiBcIjFyZW0gMFwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiNjBweFwiLFxyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxTcXVyZVRpdGxlPntjb250ZW50cy5zcXVhcmVUaXRsZX08L1NxdXJlVGl0bGU+XHJcbiAgICAgICAgICA8L0ltZz5cclxuICAgICAgICA8L1NxdWFyZT5cclxuICAgICAgPC9WYWx1ZVNoYXBlPlxyXG4gICAgICA8VmFsdWVDb250ZW50PlxyXG4gICAgICAgIDxoNCBzdHlsZT17eyBtYXJnaW5Ub3A6IFwiMXJlbVwiLCBmb250V2VpZ2h0OiBcImJvbGRcIiB9fT57Y29udGVudHMudGl0bGV9PC9oND5cclxuICAgICAgICA8cCBzdHlsZT17eyB3aWR0aDogXCIxMDAlXCIsIGxpbmVIZWlnaHQ6IFwiMS41XCIsIGZvbnRTaXplOiBcIjAuOHJlbVwiLCBtYXJnaW46IFwiMXJlbSBhdXRvXCIgfX0+XHJcbiAgICAgICAgICB7Y29udGVudHMuZGVzY31cclxuICAgICAgICA8L3A+XHJcbiAgICAgIDwvVmFsdWVDb250ZW50PlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENhcmRDb250ZW50O1xyXG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const CardContent = ({
  delay,
  contents
}) => {
  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_3__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_3__["jsx"])(ValueShape, {
    "data-aos": "flip-up",
    "data-aos-duration": "500",
    "data-aos-delay": delay,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 112,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_3__["jsx"])(Square, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_3__["jsx"])(Img, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 114,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_3__["jsx"])("img", {
    alt: contents.squareTitle,
    src: contents.src,
    style: {
      margin: "1rem 0",
      width: "60px"
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 115,
      columnNumber: 13
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_3__["jsx"])(SqureTitle, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 123,
      columnNumber: 13
    }
  }, contents.squareTitle)))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_3__["jsx"])(ValueContent, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 127,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_3__["jsx"])("h4", {
    style: {
      marginTop: "1rem",
      fontWeight: "bold"
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128,
      columnNumber: 9
    }
  }, contents.title), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_3__["jsx"])("p", {
    style: {
      width: "100%",
      lineHeight: "1.5",
      fontSize: "0.8rem",
      margin: "1rem auto"
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 129,
      columnNumber: 9
    }
  }, contents.desc)));
};

/* harmony default export */ __webpack_exports__["default"] = (CardContent);

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL1BvcnRmb2xpby9EZWNvcmF0b3IvQ2FyZENvbnRlbnQudHN4Il0sIm5hbWVzIjpbIlNxdWFyZSIsIlZhbHVlU2hhcGUiLCJJbWciLCJNQUlOX0NPTE9SIiwiU3F1cmVUaXRsZSIsIlZhbHVlQ29udGVudCIsIkNhcmRDb250ZW50IiwiZGVsYXkiLCJjb250ZW50cyIsInNxdWFyZVRpdGxlIiwic3JjIiwibWFyZ2luIiwid2lkdGgiLCJtYXJnaW5Ub3AiLCJmb250V2VpZ2h0IiwidGl0bGUiLCJsaW5lSGVpZ2h0IiwiZm9udFNpemUiLCJkZXNjIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUNBOzs7QUFFQSxNQUFNQSxNQUFNLEdBQUcsb0ZBQUg7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBQVo7O0FBVUEsTUFBTUMsVUFBVSxHQUFHLG9GQUFIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUFoQjs7QUFNQSxNQUFNQyxHQUFHLEdBQUcsb0ZBQUg7QUFBQTtBQUFBO0FBQUEscUVBSWFDLGtEQUpiLHdzS0FBVDs7QUFpQ0EsTUFBTUMsVUFBVSxHQUFHLG1GQUFIO0FBQUE7QUFBQTtBQUFBLCtSQWlCWkosTUFqQlkscTRKQUFoQjs7QUF1QkEsTUFBTUssWUFBWSxHQUFHLG9GQUFIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUFsQjs7QUFnQ0EsTUFBTUMsV0FBNEIsR0FBRyxDQUFDO0FBQUVDLE9BQUY7QUFBU0M7QUFBVCxDQUFELEtBQXlCO0FBQzVELFNBQ0Usd0hBQ0UsMkRBQUMsVUFBRDtBQUFZLGdCQUFTLFNBQXJCO0FBQStCLHlCQUFrQixLQUFqRDtBQUF1RCxzQkFBZ0JELEtBQXZFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FDRSwyREFBQyxNQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FDRSwyREFBQyxHQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FDRTtBQUNFLE9BQUcsRUFBRUMsUUFBUSxDQUFDQyxXQURoQjtBQUVFLE9BQUcsRUFBRUQsUUFBUSxDQUFDRSxHQUZoQjtBQUdFLFNBQUssRUFBRTtBQUNMQyxZQUFNLEVBQUUsUUFESDtBQUVMQyxXQUFLLEVBQUU7QUFGRixLQUhUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFERixFQVNFLDJEQUFDLFVBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUFhSixRQUFRLENBQUNDLFdBQXRCLENBVEYsQ0FERixDQURGLENBREYsRUFnQkUsMkRBQUMsWUFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0U7QUFBSSxTQUFLLEVBQUU7QUFBRUksZUFBUyxFQUFFLE1BQWI7QUFBcUJDLGdCQUFVLEVBQUU7QUFBakMsS0FBWDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQXVETixRQUFRLENBQUNPLEtBQWhFLENBREYsRUFFRTtBQUFHLFNBQUssRUFBRTtBQUFFSCxXQUFLLEVBQUUsTUFBVDtBQUFpQkksZ0JBQVUsRUFBRSxLQUE3QjtBQUFvQ0MsY0FBUSxFQUFFLFFBQTlDO0FBQXdETixZQUFNLEVBQUU7QUFBaEUsS0FBVjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0dILFFBQVEsQ0FBQ1UsSUFEWixDQUZGLENBaEJGLENBREY7QUF5QkQsQ0ExQkQ7O0FBNEJlWiwwRUFBZixFIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcclxuaW1wb3J0IFJlYWN0LCB7IEZDIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IE1BSU5fQ09MT1IgfSBmcm9tIFwiLi4vLi4vLi4vY29uZmlnXCI7XHJcblxyXG5jb25zdCBTcXVhcmUgPSBzdHlsZWQuZGl2YFxyXG4gIHdpZHRoOiAxMjBweDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgdHJhbnNpdGlvbjogMC41cztcclxuICBtYXJnaW46IDEuNXJlbSBhdXRvO1xyXG4gICY6aG92ZXIge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMHB4KTtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBWYWx1ZVNoYXBlID0gc3R5bGVkLmRpdmBcclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICB3aWR0aDogNDAlO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEltZyA9IHN0eWxlZC5kaXZgXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHRyYW5zaXRpb246IDAuNXM7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtNQUlOX0NPTE9SfTtcclxuICB0cmFuc2Zvcm06IHNrZXdZKC0xMGRlZyk7XHJcbiAgJjpiZWZvcmUge1xyXG4gICAgY29udGVudDogXCJcIjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogLTEwcHg7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzNmZmUxO1xyXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tO1xyXG4gICAgdHJhbnNmb3JtOiBza2V3WCg0NWRlZyk7XHJcbiAgICB0cmFuc2l0aW9uOiAwLjVzO1xyXG4gIH1cclxuICAmOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IC0xMHB4O1xyXG4gICAgbGVmdDogLTEwcHg7XHJcbiAgICB3aWR0aDogMTBweDtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjM2ZmZTE7XHJcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0O1xyXG4gICAgdHJhbnNmb3JtOiBza2V3WSg0NWRlZyk7XHJcbiAgICB0cmFuc2l0aW9uOiAwLjVzO1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMjBweCBzb2xpZCAjZDlkOWQ5O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFNxdXJlVGl0bGUgPSBzdHlsZWQuaDRgXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgY29sb3I6IGJsYWNrO1xyXG4gICY6YmVmb3JlIHtcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEzMHB4O1xyXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRyYW5zcGFyZW50LCB0cmFuc3BhcmVudCwgcmdiYSgwLCAwLCAwLCAwLjEpKTtcclxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbTtcclxuICAgIHRyYW5zZm9ybTogc2tld1goNDVkZWcpO1xyXG4gICAgdHJhbnNpdGlvbjogMC41cztcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke1NxdWFyZX06aG92ZXIgJjpiZWZvcmUge1xyXG4gICAgdHJhbnNmb3JtOiBza2V3WCg0NWRlZykgdHJhbnNsYXRlWSgxMHB4KTtcclxuICAgIGZpbHRlcjogYmx1cig1cHgpO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFZhbHVlQ29udGVudCA9IHN0eWxlZC5kaXZgXHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDYwJTtcclxuICAgIHBhZGRpbmc6IDFyZW0gMCAwIDFyZW07XHJcbiAgICB0ZXh0LWFsaWduOiBzdGFydDtcclxuICAgIHAge1xyXG4gICAgICBtYXJnaW46IDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIHAge1xyXG4gICAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG5pbnRlcmZhY2UgQ29udGVudHMge1xyXG4gIHNxdWFyZVRpdGxlOiBzdHJpbmc7XHJcbiAgc3JjOiBzdHJpbmc7XHJcbiAgdGl0bGU6IHN0cmluZztcclxuICBkZXNjOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBDb250ZW50VHlwZSB7XHJcbiAgY29udGVudHM6IENvbnRlbnRzO1xyXG4gIGRlbGF5OiBudW1iZXI7XHJcbn1cclxuXHJcbmNvbnN0IENhcmRDb250ZW50OiBGQzxDb250ZW50VHlwZT4gPSAoeyBkZWxheSwgY29udGVudHMgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8VmFsdWVTaGFwZSBkYXRhLWFvcz1cImZsaXAtdXBcIiBkYXRhLWFvcy1kdXJhdGlvbj1cIjUwMFwiIGRhdGEtYW9zLWRlbGF5PXtkZWxheX0+XHJcbiAgICAgICAgPFNxdWFyZT5cclxuICAgICAgICAgIDxJbWc+XHJcbiAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICBhbHQ9e2NvbnRlbnRzLnNxdWFyZVRpdGxlfVxyXG4gICAgICAgICAgICAgIHNyYz17Y29udGVudHMuc3JjfVxyXG4gICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IFwiMXJlbSAwXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogXCI2MHB4XCIsXHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPFNxdXJlVGl0bGU+e2NvbnRlbnRzLnNxdWFyZVRpdGxlfTwvU3F1cmVUaXRsZT5cclxuICAgICAgICAgIDwvSW1nPlxyXG4gICAgICAgIDwvU3F1YXJlPlxyXG4gICAgICA8L1ZhbHVlU2hhcGU+XHJcbiAgICAgIDxWYWx1ZUNvbnRlbnQ+XHJcbiAgICAgICAgPGg0IHN0eWxlPXt7IG1hcmdpblRvcDogXCIxcmVtXCIsIGZvbnRXZWlnaHQ6IFwiYm9sZFwiIH19Pntjb250ZW50cy50aXRsZX08L2g0PlxyXG4gICAgICAgIDxwIHN0eWxlPXt7IHdpZHRoOiBcIjEwMCVcIiwgbGluZUhlaWdodDogXCIxLjVcIiwgZm9udFNpemU6IFwiMC44cmVtXCIsIG1hcmdpbjogXCIxcmVtIGF1dG9cIiB9fT5cclxuICAgICAgICAgIHtjb250ZW50cy5kZXNjfVxyXG4gICAgICAgIDwvcD5cclxuICAgICAgPC9WYWx1ZUNvbnRlbnQ+XHJcbiAgICA8Lz5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2FyZENvbnRlbnQ7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=